/*
 Navicat Premium Data Transfer

 Source Server         : aaa
 Source Server Type    : MySQL
 Source Server Version : 50725
 Source Host           : 106.12.221.34:3306
 Source Schema         : blog_db

 Target Server Type    : MySQL
 Target Server Version : 50725
 File Encoding         : 65001

 Date: 18/01/2020 17:12:13
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for article
-- ----------------------------
DROP TABLE IF EXISTS `article`;
CREATE TABLE `article`  (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `created_at` timestamp(0) NULL DEFAULT NULL,
  `updated_at` timestamp(0) NULL DEFAULT NULL,
  `deleted_at` timestamp(0) NULL DEFAULT NULL,
  `content` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `title` varchar(80) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `tags` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `personal` int(10) UNSIGNED NULL DEFAULT 0,
  `categories` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_article_deleted_at`(`deleted_at`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 80 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of article
-- ----------------------------
INSERT INTO `article` VALUES (34, '2018-11-15 07:35:27', '2019-12-16 07:35:27', NULL, '\n用一些插件比如bootstrap-table实现表格起来很简单，但是自己觉得封装的太严重了。决定自己先用jquery操作dom，完整得实现一个表格的增删改查。\n**知识点**\nJSP：jquery+bootstrap\n框架：SSM\n分页实现：mybatis的分页组件PageHelper(后端分页)\n数据库：mysql\n\n**页面：**\n![页面](https://img-blog.csdnimg.cn/20181115015433774.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjU2NTEzNw==,size_16,color_FFFFFF,t_70)\n**HTML**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<title>项目管理</title>\n<script type=\"text/javascript\" src=\"../plugins/jQuery/jquery.min.js\"></script>\n<link href=\"../plugins/bootstrap/css/bootstrap.css\" rel=\"stylesheet\"/>\n<script src=\"../plugins/bootstrap/js/bootstrap.js\"></script>\n<script src=\"../js/main.js\"></script>\n<meta charset=\"UTF-8\">\n</head>\n<body>\n	<div class=\"container\">\n		<div class=\"row\">\n			<div class=\"col-md-12\">\n				<div class=\"panel panel-default\">\n					<div class=\"panel-body\">\n						<div id=\"toolbar\" class=\"btn-group\">\n							<button id=\"btn_add\" type=\"button\" class=\"btn btn-default\"\n								data-toggle=\"modal\" data-target=\"#editModal\"\n								onclick=\"newPrepare()\">\n								<span class=\"glyphicon glyphicon-plus\" aria-hidden=\"false\"></span>新增\n							</button>\n						</div>\n						<table id=\"tb_project\"></table>\n					</div>\n					<div class=\"table-responsive\">\n						<table id=\"table_project\"\n							class=\"table table-striped table-bordered table-hover userListTable\">\n							<thead>\n								<tr>\n									<th>项目ID</th>\n									<th>项目名称</th>\n									<th>项目关键字</th>\n									<th>项目描述</th>\n									<th>创建时间</th>\n									<th>项目负责人</th>\n									<th>操作</th>\n								</tr>\n							</thead>\n							<tbody>\n\n							</tbody>\n						</table>\n					</div>\n				</div>\n				<!--分页栏-->\n				<div id=\"pagination\"></div>\n			</div>\n		</div>\n	</div>\n\n\n	<!--编辑窗口(新增和修改公用)-->\n	<div class=\"modal fade\" id=\"editModal\" tabindex=\"-1\" role=\"dialog\"\n		aria-labelledby=\"myModalLabel\">\n		<div class=\"modal-dialog\" role=\"document\">\n			<div class=\"modal-content\">\n				<div class=\"modal-header\">\n					<button type=\"button\" class=\"close\" data-dismiss=\"modal\"\n						aria-label=\"Close\">\n						<span aria-hidden=\"true\">&times;</span>\n					</button>\n					<h4 class=\"modal-title\" id=\"myModalLabel\">编辑窗口</h4>\n				</div>\n				<div class=\"modal-body\">\n					<form class=\"form-horizontal\">\n						<div id=\"specialDiv\" class=\"form-group\" style=\"display: block;\">\n							<label class=\"col-sm-2 control-label\">项目ID</label>\n							<div class=\"col-md-10\">\n								<input type=\"text\" name=\"projectId\" class=\"form-control\"\n									id=\"projectId\" value=\"\"> <span class=\"help-block\"></span>\n							</div>\n						</div>\n						<div class=\"form-group\">\n							<label class=\"col-sm-2 control-label\">项目名称</label>\n							<div class=\"col-md-10\">\n								<input type=\"text\" name=\"projectName\" class=\"form-control\"\n									id=\"projectName\" value=\"\"> <span class=\"help-block\"></span>\n							</div>\n						</div>\n						<div class=\"form-group\">\n							<label class=\"col-sm-2 control-label\">关键字</label>\n							<div class=\"col-md-10\">\n								<input type=\"text\" name=\"projectKey\" class=\"form-control\"\n									id=\"projectKey\" value=\"\"> <span class=\"help-block\"></span>\n							</div>\n						</div>\n						<div class=\"form-group\">\n							<label class=\"col-sm-2 control-label\">描述</label>\n							<div class=\"col-md-10\">\n								<input type=\"text\" name=\"desc\" class=\"form-control\" id=\"desc\"\n									value=\"\"> <span class=\"help-block\"></span>\n							</div>\n						</div>\n						<div class=\"form-group\">\n							<label class=\"col-sm-2 control-label\">负责人</label>\n							<div class=\"col-sm-4\">\n								<input type=\"text\" name=\"desc\" class=\"form-control\"\n									id=\"projectLeader\" value=\"\"> <span class=\"help-block\"></span>\n							</div>\n						</div>\n					</form>\n				</div>\n				<div class=\"modal-footer\">\n					<button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">关闭</button>\n					<button id=\"saveBtn\" type=\"button\" class=\"btn btn-primary\">保存</button>\n				</div>\n			</div>\n		</div>\n	</div>\n</body>\n</html>\n```\n**JS**\nps:本例是对于一个项目表的增删改查，js中的getUserList()的方法名应改为getProjectList()，代码中忘记修改，需注意\n```javascript\n// 当前页\nvar currentPage = 1;\n// 总记录数量\nvar total = 0;\n// 默认每页显示数\nvar size = 5;\n// 总页数\nvar totalPage = 0;\n$(document).ready(   \nfunction() {\n	getUserList(currentPage, size);\n	initPagination(currentPage, total);\n	// 设置分页栏的点击事件以及何时会发生高亮\n	$(\"#pagination\").on(\"click\", \"li\", function() {\n		var aText = $(this).find(\'a\').html(); // 假如左侧分页栏是 \"上一页 1 2\n												// 下一页\"，则这里就是4个<li>，\n		checkA();  // 首先要确定能否上一页或者下一页\n		if (aText == \"上一页\") {\n			$(\".pagination > li\").removeClass(\"active\"); // 移除所有的li标签的active\n			$(\"#page\" + (currentPage - 1)).addClass(\"active\");\n			$(\".userListTable tbody\").empty();  // 清空.userListTable tbody的所有子元素\n			getUserList(currentPage - 1, size);\n			checkA();\n		} else if (aText == \"下一页\") {\n			$(\".pagination > li\").removeClass(\"active\");\n			$(\"#page\" + (currentPage + 1)).addClass(\"active\");\n			$(\".userListTable tbody\").empty();\n			getUserList(currentPage + 1, size);\n			checkA();\n		} else {\n			$(\".pagination > li\").removeClass(\"active\");\n			$(this).addClass(\"active\");\n			$(\".userListTable tbody\").empty();\n			getUserList($(this).text(), size);\n			checkA();\n		}\n	})\n});\n// 与后台获取数据，加载到页面上\nfunction getUserList(pageNum, size) {\n	currentPage = pageNum;\n	$(\".panel-body table tbody\").html(\" \");\n	$.ajax({\n				url : \'http://localhost:8080/bug/test/getAllProjectPage2.do\',\n				method : \"get\",\n				data : {    \n					\"pageNum\" : pageNum,\n					\"size\" : size\n				},\n				async : false,\n				// async属性默认为true,即异步请求。当为同步请求时JS代码加载到当前AJAX的时候会把页面里所有的代码停止加载，页面出现假死状态，当这个AJAX\n				// 执行完毕后才会继续运行其他代码页面假死状态解除。而异步则这个AJAX代码运行中的时候其他代码一样可以运行。\n				success : function(data) {\n					if (data.code == \"100\") {\n						var length = data.rows.length; // list的长度\n						currentPage = data.pageNum;\n						total = data.total;\n						if(total<size){\n							totalPage = 1;\n						}else if(total%size==0){\n							totalPage = total/size;\n						}else{\n							totalPage = parseInt(total/size)+1;\n						}\n						for (var i = 0; i < length; i++) {\n							var projectId = data.rows[i].projectId;\n							var projectName = data.rows[i].projectName;\n							var projectKey = data.rows[i].projectKey;\n							var desc = data.rows[i].desc;\n							var buildDate = data.rows[i].buildDate;\n							var projectLeader = data.rows[i].projectLeader\n							// 向tbody中添加元素，一共循环length次\n							$(\".userListTable tbody\")\n								.append(\'<tr>\'\n												+ \'<td>\'\n												+ projectId\n												+ \'</td>\'\n												+ \'<td>\'\n												+ projectName\n												+ \'</td>\'\n												+ \'<td>\'\n												+ projectKey\n												+ \'</td>\'\n												+ \'<td>\'\n												+ desc\n												+ \'</td>\'\n												+ \'<td>\'\n												+ buildDate\n												+ \'</td>\'\n												+ \'<td>\'\n												+ projectLeader\n												+ \'</td>\'\n+ \'<td><button type=\"button\" class=\"btn btn-success btn-default\" onclick=\"deleteOne(\'+projectId+\')\">删除</button><button type=\"button\" class=\"btn btn-default btn-danger\" onclick=\"updatePrepare();findOne(\'+projectId+\')\" data-toggle=\"modal\" data-target=\"#editModal\">修改</button></td>\'\n										+ \'</tr>\')\n						}\n					}\n				}\n			});\n}\n// 初始化分页栏\nfunction initPagination(pageNum, total) {\n	$(\'#pagination\').html(\" \");\n	$(\'#pagination\').append(\n			\'<ul class=\"pagination\" style=\"display:inline;\">\'\n					+ \'<span style=\"float: right;\">每页显示\'   // 分页栏右侧\n					+ \'<select id=\"dataNum\">\'\n					+ \'<option value=\"5\">5</option>\'\n					+ \'<option value=\"10\">10</option>\'\n					+ \'<option value=\"15\">15</option>\'\n					+ \'<select>条记录,总共有\' + totalPage\n					+ \'页，总共\' + total + \'条记录</span>\'\n					+ \'</ul>\')\n	$(\"#pagination ul\")  // 分页栏左侧\n			.append(\n					\'<li><a href=\"javascript:void(0);\" id=\"prev\">上一页</a>\')\n	for (var i = 1; i <= totalPage; i++) {\n		$(\"#pagination ul\").append(\'<li id=\"page\'\n						+ i           // 这里是给数字li设置id\n										// 如果是第一页id就为page1,第二页id就为page2\n						+ \'\"><a href=\"javascript:void(0);\" >\' + i + \'</a></li>\' )\n	}				// javascript:void(0):意义是让超链接去执行一个js函数，而不是去跳转到一个地址。每一个li的onclick事件在ready()中已经定义了\n	$(\"#pagination ul\")\n			.append(\n					\'<li><a href=\"javascript:void(0);\"  id=\"next\">下一页</a></li>\')\n	\n	\n	$(\"select option[value=\" + size + \"]\").attr(      // 设置分页栏右侧下拉框选中项\n			\'selected\', true)\n	$(\'#page\'+currentPage+\'\').addClass(\"active\");   // 设置分页栏左侧下page1\n													// <li>标签为选中项（在第一次载入时为active）\n	checkA();\n}\n\n// 分页栏右侧下拉列表的实现\n/*\n * 每次执行initPagination方法时，都要将#dataNum(分页栏右侧下拉框)添加change事件，再执行函数。\n * 但是！change事件只会发生一次。如果第二次改变分页栏右侧下拉框选中项时，change事件将不会发生。所以 要在每次要先off\n * #dataNum(分页栏右侧下拉框)的change事件，再添加新的change事件\n */\n$(document).off(\'change\', \'#dataNum\').on(\n		\'change\',\n		\'#dataNum\',\n		function() {\n			size = $(this).children(\'option:selected\')\n					.val();   // 改变当前能显示的数量时，就是改变size\n			currentPage = 1;  // 改变后，应该重新加载列表，currentPage又回到了1\n			$(\".userListTable tbody\").empty();   // 清空.userListTable\n													// tbody的所有子元素\n			getUserList(currentPage, size);\n			initPagination(size, total);\n		});\n\n\n// 主要是用于检测当前页如果为首页，或者尾页时，上一页和下一页设置为不可选中状态\nfunction checkA() {\n	currentPage == 1 ? $(\"#prev\").addClass(\n			\"btn btn-default disabled\") : $(\"#prev\")\n			.removeClass(\"btn btn-default disabled\");\n	currentPage == totalPage ? $(\"#next\").addClass(\n			\"btn btn-default disabled\") : $(\"#next\")\n			.removeClass(\"btn btn-default disabled\");\n}\n// 修改开始\n// 修改操作每次需要先根据id查询当前project\nfunction findOne(id){\n	$.ajax({\n		url : \'http://localhost:8080/bug/test/findOne.do\',\n		method : \"get\",\n		data : {\n			\"id\" : id\n		},\n		async : true,\n		success : function(data) {\n			row=data.row;\n			if(data.code==100){\n				$(\"#projectName\").val(data.row.projectName);\n				$(\"#projectKey\").val(data.row.projectKey);\n				$(\"#desc\").val(data.row.desc);\n				$(\"#projectLeader\").val(data.row.projectLeader);\n			}\n			},\n	}\n)\n}\nvar row={};// 定义row变量\nfunction updateOne(){\n	row.projectName=$(\"#projectName\").val();\n	row.projectKey=$(\"#projectKey\").val();\n	row.desc=$(\"#desc\").val();\n	row.projectLeader=$(\"#projectLeader\").val();\n	$.ajax({\n		url : \'http://localhost:8080/bug/test/update.do\',\n		contentType: \'application/json; charset=UTF-8\',\n		dataType: \"json\",\n		method : \"post\",\n		data : JSON.stringify(row),         // JQuery以JSON方式POST数据到服务端\n											// 需设置contentType dataType data\n		async : false,\n		success : function(data) {\n			\n			if(data.success){\n				$(\"#saveBtn\").attr(\"data-dismiss\",\"modal\"); // //关闭当前窗口\n				$(\".userListTable tbody\").empty(); \n				getUserList(currentPage, size);\n				\n			}else{\n				alert(data.message);\n			}\n			\n			},\n	}\n)\n}\n// 修改结束\n// 删除开始\nfunction deleteOne(id){\n	$.ajax({\n		url : \'http://localhost:8080/bug/test/deleteOne.do\',\n		method : \"get\",\n		data : {\n			\"id\" : id\n		},\n		async : true,\n		success : function(data) {\n			if(data.code==100){\n				$(\".userListTable tbody\").empty();\n				if((total-1)%size==0)  // 如果删除一个元素后总页数减少1\n					{\n					if(currentPage==1){\n						getUserList(currentPage, size);\n						initPagination(currentPage, total);\n					}else{\n						getUserList(currentPage-1, size);\n						initPagination(currentPage, total);\n						checkA();\n					}\n					}else{  // 如果删除一个元素后总页数不会减少\n						getUserList(currentPage, size);\n						initPagination(currentPage, total);\n						checkA();\n					}\n			}else{\n				alert(\"删除失败\");\n			}\n			},\n	}\n)\n}\n// 删除结束\n// 新增开始\nfunction addOne(){\n	row={};\n	row.projectId=$(\"#projectId\").val();\n	row.projectName=$(\"#projectName\").val();\n	row.projectKey=$(\"#projectKey\").val();\n	row.desc=$(\"#desc\").val();\n	row.projectLeader=$(\"#projectLeader\").val();\n	$.ajax({\n		url : \'http://localhost:8080/bug/test/add.do\',\n		contentType: \'application/json; charset=UTF-8\',\n		dataType: \"json\",\n		method : \"post\",\n		data : JSON.stringify(row),         // JQuery以JSON方式POST数据到服务端\n											// 需设置contentType dataType data\n		async : false,\n		success : function(data) {\n			\n			if(data.success){\n				$(\"#saveBtn\").attr(\"data-dismiss\",\"modal\"); // 关闭当前窗口\n				$(\".userListTable tbody\").empty(); \n				if(total/size==totalPage)  // 如果新增一个元素后总页数增加1\n				{\n					getUserList(currentPage+1, size);\n					initPagination(currentPage, total);\n					checkA();\n				}else{  // 如果新增一个元素后总页数不会增加\n					getUserList(currentPage, size);\n					initPagination(currentPage, total);\n					checkA();\n				}\n				\n			}else{\n				alert(data.message);\n			}\n			\n			},\n	}\n)\n}\n\n// 新增结束\n// 在index页面进行新加或者修改的编辑窗口是同一个，但是，如果是新增，就需要有projectId,反之没有\nvar hasId=true;\nfunction newPrepare(){\n	if(!hasId){\n		$(\"#specialDiv\").attr(\"style\",\"display: block;\");\n		hasId=true;\n	}\n	$(\"#saveBtn\").attr(\"onclick\",\"\");\n	$(\"#saveBtn\").attr(\"onclick\",\"addOne()\");\n	$(\"#projectId\").val(\"\");\n	$(\"#projectName\").val(\"\");\n	$(\"#projectKey\").val(\"\");\n	$(\"#desc\").val(\"\");\n	$(\"#projectLeader\").val(\"\");\n}\nfunction updatePrepare(){\n	if(hasId){\n		$(\"#specialDiv\").attr(\"style\",\"display: none;\");\n		hasId=false;\n	}\n	$(\"#saveBtn\").attr(\"onclick\",\"\");\n	$(\"#saveBtn\").attr(\"onclick\",\"updateOne()\");\n}\n\n\n\n\n\n```\n**数据库表**\n\n```sql\n/*\n Navicat Premium Data Transfer\n\n Source Server         : localhost_3306\n Source Server Type    : MySQL\n Source Server Version : 50724\n Source Host           : localhost:3306\n Source Schema         : projectdb\n\n Target Server Type    : MySQL\n Target Server Version : 50724\n File Encoding         : 65001\n\n Date: 15/11/2018 03:32:32\n*/\n\nSET NAMES utf8mb4;\nSET FOREIGN_KEY_CHECKS = 0;\n\n-- ----------------------------\n-- Table structure for project\n-- ----------------------------\nDROP TABLE IF EXISTS `project`;\nCREATE TABLE `project`  (\n  `project_id` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT \'【项目编号】 主键，流水号\',\n  `project_name` text CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT \'【项目名称】\',\n  `project_key` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT \'【项目关键字】 唯一键\',\n  `project_desc` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT \'【项目描述信息】\',\n  `build_date` timestamp(0) NOT NULL COMMENT \'【项目创建日期】\',\n  `project_leader` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT \'【项目负责人】 外键，关联BUG_Users表UserID\',\n  INDEX `fk_bug_projects_prjleader`(`project_leader`) USING BTREE\n) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = \'实训项目表; InnoDB free: 10240 kB; (`userid`) REFER `bug/bug_users`(`userid`)\' ROW_FORMAT = Compact;\n\n-- ----------------------------\n-- Records of project\n-- ----------------------------\nINSERT INTO `project` VALUES (\'8\', \'虚拟社区系统\', \'bbs\', \'线上论坛交流平台\', \'2016-09-13 04:10:09\', \'赵六\');\nINSERT INTO `project` VALUES (\'9\', \'网络教学平台\', \'net\', \'用于线上授课\', \'2016-07-18 12:00:00\', \'田七\');\nINSERT INTO `project` VALUES (\'5\', \'用户管理系统\', \'user\', \'产品用户管理\', \'2018-11-14 16:30:46\', \'李四\');\nINSERT INTO `project` VALUES (\'2\', \'淘淘电商平台\', \'tt\', \'线上购物平台\', \'2018-11-15 00:40:41\', \'张三\');\nINSERT INTO `project` VALUES (\'7\', \'学生管理系统\', \'sms\', \'学生管理系统\', \'2018-11-15 01:23:07\', \'李四\');\nINSERT INTO `project` VALUES (\'6\', \'网站发布系统\', \'cms\', \'网站发布系统\', \'2018-11-15 01:24:05\', \'赵六\');\n\nSET FOREIGN_KEY_CHECKS = 1;\n\n```\n\n**demo下载地址**\nhttps://github.com/a845082868/test1\n\n**启动项目后访问**\nhttp://localhost:8080/bug/test/index.do \n', 'jquery+ajax实现分页及增删改查练手实例新手向', 'jquery,java,ssm', 0, 'javascript');
INSERT INTO `article` VALUES (35, '2019-02-10 07:39:50', '2019-12-16 07:39:51', NULL, '\n最近使用MongoDB，在连接mongoose时遇到一个这样的问题![问题代码](https://img-blog.csdnimg.cn/20190210130804606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjU2NTEzNw==,size_16,color_FFFFFF,t_70)\n我这里示例的db_shop数据库是添加了用户的，按道理来说，mongoDB开启auth验证后，必须要输入密码和账号才可以连接成功。如果直接连接会报错，例如客户端：![错误代码](https://img-blog.csdnimg.cn/20190210131315115.png)\n但是控制台依旧输出了连接成功，这让我很不理解，明明开启了auth但为什么还是能够连接上呢？然后我发现admin数据库也可以连接上，甚至**一个不存在的数据库依然显示连接成功**（什么是mongoDB的auth验证请看：https://www.imooc.com/article/43530）\n\n我这个环境是一个商城项目，按需求显示商品列表。最终我发现。我把auth关了，后端可以正确获得json数据。成功渲染到页面上。**但是如果我开启auth，mongoose连接mongoDB不输入用户和密码，虽然控制台输入连接成功。但是根本就没有权限获取到后端的数据。**\n![错误代码](https://img-blog.csdnimg.cn/20190210132539331.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjU2NTEzNw==,size_16,color_FFFFFF,t_70)\n当正确输入用户和密码时\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190210133520794.png)\n成功获取到数据\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190210133433372.png)', '当开启auth验证时，mongoose连接mongoDB时遇到的坑', 'mongoose,mongodb,踩坑', 0, 'mongoDB');
INSERT INTO `article` VALUES (36, '2019-02-19 07:41:56', '2019-12-16 07:41:56', NULL, '```javascript\n//只有函数对象有prototype，但所有对象都有__proto__，所有对象的__proto__指向其构造函数的prototype\nlet a = new Array()\n\nconsole.log(a.__proto__==Array.prototype)  //true  \n\n//第一条线  普通对象之间的继承关系\nconsole.log(Array.prototype.__proto__==Object.prototype)  //true  Array.prototype是一个[]，我们把它看成一个普通对象，\n//它没有prototype（只有函数对象有），但它有__proto__，一个普通对象的__proto__指向Object.prototype\n\nconsole.log(Object.prototype) //{}  而 Object.prototype也是一个普通对象，它没有prototype，只有__proto__\n\nconsole.log(Object.prototype.__proto__) //null  最终指向了null\n\n//第二条线  函数对象之间的继承关系\nconsole.log(Array.prototype.constructor==Array) //true  //prototype是每个构造函数在定义的时候就自动new出的一个原型对象，\n//是一个实例，而这个实例的constructor就指向它的构造函数\n\nconsole.log(Array.prototype) //[]这里又回到了第一条线的第一步\n\nconsole.log(Array.__proto__==Function.prototype) //true  //所有的构造函数的__proto__ 都指向Function.prototype，\n//甚至包括根构造函数Object及Function自身\n\nconsole.log(Function.prototype)  //[Function]  而这时！Function.prototype却不是一个普通对象，而是一个空函数。\n\nconsole.log(Function.prototype.prototype) //undifined 但是它却没有prototype(之前说所有的函数对象都有prototype，它是例外)，但是他有__proto__\n\nconsole.log(Function.prototype.__proto__==Object.prototype) //而它的__proto__又指到了Object.prototype\n\nconsole.log(Object.prototype.__proto__) //null  最终指向了null\n\n```\n总结：\n说到底原型链就是解释JS中对象的继承关系。\n\n* 普通对象之间的继承关系：继承的是方法和属性。最上层是null，最终继承到普通对象本身。而函数的特性只继承到构造函数本身，所以它的实例没有函数特性\n\n* 函数对象之间的继承关系：继承的是函数的特性。最上层是null,最终继承到构造函数本身\n\n这张图画的非常好，借鉴一下\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190219142940900.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjU2NTEzNw==,size_16,color_FFFFFF,t_70)\n\n*自己对原型链的感悟，如有不对，欢迎指正*', '简单粗暴console.log出整条原型链', '原型链', 0, 'javascript');
INSERT INTO `article` VALUES (37, '2019-03-15 07:44:04', '2019-12-16 07:44:04', NULL, '最近在工作中经常碰这几个方法。所以想总结一下这几个方法。我们把call(),apply(),bind()方法分为一类。他们的作用是改变this的指向，它的调用者为函数。而map()方法类似于foreach。它的调用者为数组。\n## call():\n![call](https://img-blog.csdnimg.cn/20190315173146196.png)\n调用call方法时同时**立即执行**foo函数，但this的指向为obj\n## apply():\n![apply](https://img-blog.csdnimg.cn/20190315173258431.png)\n调用apply方法时同时**立即执行**foo函数，但this的指向为obj\n\n这两个方法的区别为：\napply方法的第一个参数指定this的指向,第二个参数为一个数组。对应着函数中的a，b，c传递过去了\ncall方法除了第一个参数指定this的指向外，其余的都将作为参数依次传递给函数本身\n## bind():\n而bind（）方法用法差不多，但他不是**立即执行**的，而是将**调用它的函数**返回。函数还是一样的函数。只是this的指向变了\n## map():\n它的调用者为数组，类似于foreEach方法\n```javascript\nvar data = [1, 2, 3, 4];\n\nvar arrayOfSquares = data.map(function (item) {\n  return item * item;\n});\n\nalert(arrayOfSquares); // 1, 4, 9, 16\n```\n\n## 工作中遇到的实例：\n![demo](https://img-blog.csdnimg.cn/2019031517445037.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjU2NTEzNw==,size_16,color_FFFFFF,t_70)\n\nconsole.log(this._getLifetimeReportParams(ioIds, this.member.id, strategy));返回的是一个{}，则reportPromises是一个数组里面有个四个对象。bind()方法用于改变this的指向，它不会像apply和call方法，改变了this指向后立即执行。而是返回一个新的函数，这个函数还是本来的函数，只是this指向变了，它没有立即执行。而[].map则相当于Forech()，传进去的值为一个回调函数，其参数为当前对象。可以看成[].map(getReport(opts))。而这个opts就等于当前数组遍历的对象\n\nopts==this._getLifetimeReportParams(ioIds, this.member.id, strategy)\n', '一篇文章搞懂js中的call(),apply(),bind()以及map()方法', '作用域,遍历,bind方法', 0, 'javascript');
INSERT INTO `article` VALUES (38, '2019-03-20 07:48:25', '2019-12-16 07:48:25', NULL, '#### 需求：自己搭建一台dns服务器，使局域网内的主机能通过服务器解析域名，访问具体的服务\n![dd](https://img-blog.csdnimg.cn/20190320174056743.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjU2NTEzNw==,size_16,color_FFFFFF,t_70)\n\n\nlinux主机(dns服务器):\n - 操作系统：ubuntu14.0.4\n - ip: 10.0.22.20（ifconfig的内网ip）\n\nwindows主机(用于测试):\n - ip: 10.0.10.8（ifconfig的内网ip）\n - 程序端口：8030\n \n # 一.搭建dns服务器\n#### 以下操作都在DNS服务器主机操作：\n###### 1.完全卸载bind9(清除之前所有bind9的配置，首次安装请忽略)\n```c\nsudo apt-get purge bind9\n```\n###### 2.安装bind9\n```c\nsudo apt-get -y install bind9\n```\n###### 3.bind9配置文件的介绍\nBind的配置文件，放在/etc/bind9/目录下，主要的配置文件有以下4个，分别是：\n\n/etc/bind9/named.conf（主配置文件）\n/etc/bind9/named.default-zones;\n/etc/bind9/named.conf.options;\n/etc/bind9/named.conf.local（域名和数据文件的配置）\n其中，/etc/bind9/named.conf是Bind的主配置文件，不过他并不包含DNS数据。查看/etc/bind9/named.conf文件可以发现，主配置文件里面使用了include关键字来加载其它3个配置文件。 \n在/etc/bind9/named.conf.options文件中，有一句默认的配置（如下），该语句的所示的目录的作用是存放正向解析以及反向解析的一些配置文件，该配置告诉Bind，到/var/cache/bind目录下去寻找数据文件\n###### 4.添加正向解析配置（我们这里只做正向解析，即解析域名为ip）\n1. 修改/etc/bind/named.conf.local文件\n```c\nsudo vim /etc/bind/named.conf.local\n```\n2. 添加以下信息\n```c\nzone \"pppercy.com\" {  //设置你要配置的域名\n    type master;\n    file \"db.pppercy.com\"; //这里指向了数据文件，具体位置在/var/cache/bind/db.pppercy.com\n};\n```\n3. 创建db.pppercy.com文件\n因为这时db.pppercy.com文件是不存在的，我们复制一个现有的文件作为db.pppercy.com文件的模板\n```c\nsudo cp /etc/bind/db.local /var/cache/bind/db.pppercy.com\n```\n4. 修改db.pppercy.com文件\n```c\nsudo vim /var/cache/bind/db.pppercy.com\n```\n5. 将其改为如下内容(这里的10.0.10.8为我运行了项目的windows主机ip。注意文件内容不要缺失)\n```c\n;\n; BIND data file for local loopback interface\n;\n$TTL    604800\n@       IN      SOA     localhost. root.localhost. (\n                              2         ; Serial\n                         604800         ; Refresh\n                          86400         ; Retry\n                        2419200         ; Expire\n                         604800 )       ; Negative Cache TTL\n;\n@       IN      NS      ns.\n@       IN      A       10.0.10.8\nwww     IN      A       10.0.10.8\n@       IN      AAAA    ::1\n\n```\n6. 重启bind9\n```c\nsudo service bind9 restart\n```\n####  以下操作都在windows测试主机操作：\n##### 测试\n1. 修改dns\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190320181154595.png)\n2. 启动项目（端口我这里设置的为8030。如果没有测试的项目也可以不用。我们搭建的目的是看到底dns服务器是否解析了我们的域名，则跳过此步）\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190320181415325.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjU2NTEzNw==,size_16,color_FFFFFF,t_70)\n3. 刷新dns缓存(打开cmd运行)\n```c\nipconfig /flushdns\n```\n4. 测试（如果有响应则表示搭建成功，dns成功解析域名）\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190320181832345.png)\n5. 这样我们就可以在浏览器通过域名加端口访问项目了\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190320182014189.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjU2NTEzNw==,size_16,color_FFFFFF,t_70)\n# 二.实现nginx的端口转发：\n	    这时我们的dns服务器已经搭建好了。只要是局域网内的主机，将dns都配置为你的dns主机ip。都可以通过\n	域名加端口访问你的项目了。但是平时我们访问一个网站，难道还要加上端口访问吗？现在，我们就用nginx的端\n	口转发，把这个讨厌的端口去掉\n#### 以下操作都在DNS服务器主机操作：\n1. 安装nginx\n```c\nsudo apt-get install nginx\n```\n2. 修改db.pppercy.com文件\n```c\nsudo vim /var/cache/bind/db.pppercy.com\n```\n3. 将其改为如下内容(这里的10.0.22.20是dns服务器主机ip。注意文件内容不要缺失)\n```c\n;\n; BIND data file for local loopback interface\n;\n$TTL    604800\n@       IN      SOA     localhost. root.localhost. (\n                              2         ; Serial\n                         604800         ; Refresh\n                          86400         ; Retry\n                        2419200         ; Expire\n                         604800 )       ; Negative Cache TTL\n;\n@       IN      NS      ns.\n@       IN      A       10.0.22.20\nwww     IN      A       10.0.22.20\n@       IN      AAAA    ::1\n\n```\n4. 修改nginx的配置文件\n```c\nsudo  vim /etc/nginx/sites-available/default\n```\n我们知道nginx.conf是nginx的主配置文件\n但是在http模块中有这两行代码，一种包含关系\n```\ninclude /etc/nginx/conf.d/*.conf; \ninclude /etc/nginx/sites-enabled/*\n```\nsites-available是存放当前的server的配置, 在这里修改\n而sites-enabled是激活并使用的server配置（从sites_available的文件创建快捷方式到sites-enabled）\n你会发现sites-available里面增加的内容，会立即复制到sites-enabled里面\n之间遇到一个问题，如果我直接把server的配置增加到主配置文件的http模块，配置一个可以正常启动，配置两个就启动失败，然后将server的配置都放到了sites-available/default这个文件就可以了\n5. 添加以下内容\n```c\nserver {\n       listen 80;\n       server_name pppercy.com;\n       location / {\n                proxy_pass http://10.0.10.8:8030;\n       }\n                }\n```\n6. 重启nginx\n```\nsudo service nginx restart\n```\n7. 重启bind9\n```\nsudo service nginx restart\n```\n####  以下操作都在windows测试主机操作：\n##### 测试\n1. 刷新dns缓存(打开cmd运行)\n```c\nipconfig /flushdns\n```\n2. 成功访问\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190320185642381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjU2NTEzNw==,size_16,color_FFFFFF,t_70)\n# 总结\n1. 解析流程：\n访问pppercy.com域名——>dns服务器进行解析——>找到db.pppercy.com数据文件——>数据文件指向dns服务器主机ip的80端口(80端口可以省略)——>nginx监听了当前主机的80端口——>匹配nginx的配置文件的server项的server_name——>匹配成功——>成功转发到http://10.0.10.8:8030\n\n\n\n2. 讨论一个问题：nginx到底应该安装在哪里?\n1.跑项目的主机（按道理来说项目应该是跑在linux主机的，这里为了测试方便就直接拿了个跑在windows主机的项目进行测试了）\n2.dns服务器\n	 \n   如果安装到跑服务的主机 nginx的默认端口是80 而我们在bind9的数据文件中指向的正是10.0.10.8:80 当我们访问pppercy.com的时候 nginx配置的server的server_name将会匹配这一个域名 再转发到10.0.10.8:8030。这时我们同样可以实现端口转发。同样的，这台主机在8020端口又跑了一个服务，我们同样给nginx增加一个server配置 再到dns服务器配置一个pppercy2.com的域名，其数据文件也指向10.0.10.8:80，当我们访问pppercy2.com的时候 nginx又会转发到10.0.10.8:8020\n\n	但是 如果另一个项目跑在另一个主机 那又要重新安装一个nginx 这就导致了每一台跑服务的主机都需要安装nginx进行配置 所以 索性我们直接将nginx安装在dns服务器 无论哪台主机的项目 都需要先经过dns服务器进行解析 解析后再通过安装到当前dns服务器的nginx进行端口转发', 'linux搭建dns服务器以及配置nginx端口转发新手向', '搭建dns,域名解析', 0, 'linux,nginx');
INSERT INTO `article` VALUES (39, '2019-04-18 07:50:19', '2019-12-16 07:50:19', NULL, '\n**在接触express项目的时候，大家会不会经常遇到这样一个问题。这个app.use，router.use有什么区别，这个next又是做什么的？**\n\n如果你对这几个概念不清楚。请好好看下面的例子\n## 一.app.use和router.use\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190418160650513.png)\n如果你的代码只是上面这样写，是错误的写法。只有/app这个接口会生效，/router不会。你只需要记住这样一句话：**路由器的行为就像中间件本身，因此您可以将其用作app.use（）的参数或作为另一路由器的use（）方法的参数**\n\n我们用都没有用这个路由器，那它怎么生效呢？何为路由？对应着我们平时生活中使用的路由器，一个路由器有多个接口，这里的Router的概念应该就取自于此\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190418162033494.png)\n你可能见过这样的代码，但如果这样实现起来会不会更加优雅呢？\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190418163053970.png)![在这里插入图片描述](https://img-blog.csdnimg.cn/20190418162915594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjU2NTEzNw==,size_16,color_FFFFFF,t_70)\n我们可以把app看作根router,一个app里面有多个接口。比如这个test接口，而/test就是父路径，在这个testRouter中定义的router.use()都是子路径。在这个testRouter中也可以使用router.use(\'/test2\',test2Router),设置子路径的子路径\n\napp.use()和router.use()都可以第一个参数为path，第二个参数可以填一个函数(代表访问到该接口需要干什么)或者一个router。注意：router一定要被use之后才会生效，不管是被app.use还是另一个router.use\n\n## 二.拦截器的概念\n在实际的开发中，我们经常会使用到拦截器。\n比如说一个购物网站，有很多页面必须要登录之后才有权限访问。登录之后，浏览器存一个session_id放在cookies里面。当每次你需要访问其他接口时，都会将其作为参数传递过去。\n而作为服务端，进来一个请求。都会去判断有没有session_id，以及是否有效。而这段代码肯定是一个公共部分，当每次进来请求时，就会先将其拦截。通过则让它访问真正的接口\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190418170126642.png)\n在express中，app.use(\'*\',(req,res,next)=>{\n\n//todo\n\n})，就配置好了一个拦截器。*代表所有路径，但是需要注意一点：\n\n**一定要将拦截器放在中间件或静态资源的后面，路由定义的前面，以至于无法加载白名单中的public中的文件，js、css、image和中间件**\n## 三.next()\n在express中，清楚next()的作用是尤为重要的。它决定了整个请求所经历的步骤。先看这样一段代码，当我们访问：localhost:3000/test/a   你认为控制台会打印出什么?\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190418172043940.png)\n结果是先打印 this is test，再接着打印出 aaaaaaaa\n\n总结：\n     这里的/test不是指路径只有是/test时候会执行函数。而是**含有/test的路径都会执行**，然后通过next()，继续执行后面匹配的路径。 如果我们在/test中加next()，就根本就不会打印aaaaaaaa了。\njs是单线程的。它会依次从上至下的去执行匹配路径的接口。当遇到一个没有next()的接口，就完成了这次请求，开始响应。\n这就是为什么error handler时都需要放在app.js最下面定义。看这样一个例子：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190418173718151.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjU2NTEzNw==,size_16,color_FFFFFF,t_70)\n当我们访问localhost:3000/test/a的时候，它依旧会报404错误。但是也会将aaaaaa打印出来，我们知道404一般是找不到服务器资源才报的错。但是明明找到了，它依旧报错。这时你应该懂得了next()的用法\n## 四.其他\n1./ 只会匹配根路径\n2./*和*匹配所有。\n3.app.use和app.get，router.use和router.get的区别：   \n.use的第二个参数可以传递一个对象或者是一个函数，可以匹配所有的请求方式。 而.get或者.post第二个参数都只能时一个函数。\n\n\n这是最近我在使用express时的总结，如有不正，欢迎指正。如果你想自己也实践一下，可以安装一个express的脚手架\n```javascript\nnpm i express-generator -g  // 全局安装 express-generator\n\nexpress 项目文件夹的名字 -e  //快速从创建一个项目目录\n```', 'nodejs理解Express中router.use app.use 拦截器 next方法 结合实例新手向', 'router,拦截器', 0, 'nodejs,express');
INSERT INTO `article` VALUES (40, '2019-04-24 07:51:57', '2019-12-16 07:51:58', NULL, '### 只有在同一个文件系统才可以建立链接\n\n##### 建立软链接：ln -s 源文件 目标文件\n##### 建立硬链接：ln 源文件 目标文件\n### 软链接和硬链接的区别：\n**软链接：**\n软链接的相当于windows系统的快捷方式。当给一个源文件创建了一个软链接文件，则它的索引节点号(Inode Index)和时间都和源文件不同。可以说是两个文件。但是软链接和源文件依旧保持了同步更新。注意：当删除了源文件时，软链接文件就不可用了。\n**硬链接：**\n当给一个源文件创建了一个硬链接文件。它的索引节点号(Inode Index)和时间都和源文件相同。硬连接的作用是允许一个文件拥有多个有效路径名，所以可以说他们是同一个文件，并且这两个文件都保持了同步更新。但是当删除了源文件，而硬链接文件依旧可用，且内容依旧存在。所以我们就可以建立硬连接到重要文件，防止误删。文件真正删除的条件是与之相关的所有硬连接文件均被删除', '软链接和硬链接的区别及建立链接', '软链接,硬链接', 0, 'linux');
INSERT INTO `article` VALUES (41, '2019-05-16 07:53:38', '2019-12-16 07:53:38', NULL, '**axios封装了为一个http.js文件，请求响应拦截，认证生成jwt**\n\n```javascript\nimport axios from \'axios\';\nimport qs from \'qs\';\nimport { Base64 } from \'js-base64\';\nimport { HmacSHA256 } from \"crypto-js\";\nclass Http {\n    constructor (router) {\n        //设置axios默认的以post请求的头部信息\n        axios.defaults.headers.post[\'Content-Type\'] = \'application/x-www-form-urlencoded\';\n        this.$axios = axios.create({\n            baseURL: \'/api/\',\n            timeout: 10000\n        });\n        //配置请求拦截器，每次请求都会经过这个方法。我们可以在这里设置一些头部信息等一切请求前需要预先处理的事情\n        this.$axios.interceptors.request.use(config => {\n            if(config.id){\n                config[\'headers\'][\'Authorization\'] = \'BEARER \' + this.getToken(config.id);\n            }else{\n                config[\'headers\'][\'Authorization\'] = \'BEARER \' + this.getToken();\n            }\n            config[\'data\'] = qs.stringify(config[\'data\']);\n            return config;\n        }, error => Promise.reject(error));\n        //配置响应拦截器，每次响应都会先经过这个方法。实现单用户登录在这里很简单，以及配置一些数据的处理，比如转换格式等\n        this.$axios.interceptors.response.use(response => {\n            if(response.status === 512){ //当响应状态码为512时，证明该账号在其他处登录，立即跳转到登录页\n                router.push({ path: \"/login\" });\n            }\n            if(response.status === 200) {\n                if(response.data) {\n                    if(response.data.Code === 0) return Promise.resolve(response.data || true);\n                    return Promise.reject(response.data || true);\n                }\n                return Promise.resolve(response || false);\n            }\n            return Promise.reject(response || false);\n        }, (error) => {\n            return Promise.reject(error);\n        });\n    }\n    /**\n     * 前端生成jwt。每次发送请求都会通过这个方法生成token\n     * \n     */\n    getToken(id) {\n        let part1 = Base64.encode(\n            JSON.stringify({ alg: \"HS256\", typ: \"JWT\" })\n        );\n        part1.trimRight(\"=\");\n        let part2;\n        if(id){\n                part2 = Base64.encode(\n                    JSON.stringify({\n                        timestamp:Date.parse(new Date()), //因为时间戳的不同，每次请求生成的token都不相同，提高安全性\n                        user_id: sessionStorage.getItem(\'userId\'),\n                        id:id,\n                    })\n                ).trimRight(\"=\");\n        }else{\n            part2 = Base64.encode(\n                JSON.stringify({\n                    timestamp:Date.parse(new Date()),\n                    user_id: sessionStorage.getItem(\'userId\'),\n                    id:\"\",\n                })\n            ).trimRight(\"=\");\n        }\n        let part3 =  HmacSHA256(part1 +\'.\'+ part2, \'secret\').toString(); //使用HmacShA256实现签名\n        let token = part1 + \'.\' + part2 + \'.\' + part3;\n        return token\n    };\n    /**\n     * GET\n     * \n     * @param {String}  [url]       - 链接\n     * @param {Object}  [params]    - 参数\n     * @param {Boolean} [msg]       - 是否错误弹出框\n     */\n    get (url, params = {}, msg = true) {\n        return new Promise((resolve, reject) => {\n            this.$axios.get(`${url}`, {\n                params\n            }).then(response => {\n                if(response.code === 1) return resolve(response.data || true);\n                msg && this.$msg.error(\'获取数据失败\');\n                reject(response || false);\n            }).catch(err => {\n                msg && this.$msg.error(\'获取数据失败\');\n                reject(err || false);\n            });\n        });\n    }\n\n    \n    /**\n     * POST\n     * \n     * @param {String}  [url]       - 链接\n     * @param {Object}  [data]      - 数据\n     * @param {Object}  [config]    - 配置\n     */\n    post (url, data = {}, config = {}) {\n        return this.$axios.post(`${url}`, data, config);\n    }\n\n    /**\n     * PUT\n     * \n     * @param {String}  [url]       - 链接\n     * @param {Object}  [data]      - 数据\n     * @param {Object}  [config]    - 配置\n     */\n   \n\n    \n}\n\nexport default Http  //export构造函数\n```\n在main.js实例化对象并赋值给vue的原型对象的$http，这里将VueRouter作为参数是因为在响应拦截器中需要进行页面跳转\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190516233115742.png)', 'vue项目中封装axios', 'axios,jwt', 0, 'vue');
INSERT INTO `article` VALUES (42, '2019-05-17 07:57:15', '2019-12-16 07:57:15', NULL, '**一.安装依赖：**\n\n```javascript\nnpm install -S file-saver\nnpm install -S xlsx\nnpm install -D script-loader\n```\n**二.将Blob.js和 Export2Excel.js放到src的lib文件夹中（代码块不能折叠很难受 - -）**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190516235143130.png)\nBlob.js:\n\n```javascript\n/* eslint-disable */\n/* Blob.js\n * A Blob implementation.\n * 2014-05-27\n *\n * By Eli Grey, http://eligrey.com\n * By Devin Samarin, https://github.com/eboyjr\n * License: X11/MIT\n *   See LICENSE.md\n */\n\n/*global self, unescape */\n/*jslint bitwise: true, regexp: true, confusion: true, es5: true, vars: true, white: true,\n plusplus: true */\n\n/*! @source http://purl.eligrey.com/github/Blob.js/blob/master/Blob.js */\n\n(function (view) {\n    \"use strict\";\n\n    view.URL = view.URL || view.webkitURL;\n\n    if (view.Blob && view.URL) {\n        try {\n            new Blob;\n            return;\n        } catch (e) {}\n    }\n\n    // Internally we use a BlobBuilder implementation to base Blob off of\n    // in order to support older browsers that only have BlobBuilder\n    var BlobBuilder = view.BlobBuilder || view.WebKitBlobBuilder || view.MozBlobBuilder || (function(view) {\n            var\n                get_class = function(object) {\n                    return Object.prototype.toString.call(object).match(/^\\[object\\s(.*)\\]$/)[1];\n                }\n                , FakeBlobBuilder = function BlobBuilder() {\n                    this.data = [];\n                }\n                , FakeBlob = function Blob(data, type, encoding) {\n                    this.data = data;\n                    this.size = data.length;\n                    this.type = type;\n                    this.encoding = encoding;\n                }\n                , FBB_proto = FakeBlobBuilder.prototype\n                , FB_proto = FakeBlob.prototype\n                , FileReaderSync = view.FileReaderSync\n                , FileException = function(type) {\n                    this.code = this[this.name = type];\n                }\n                , file_ex_codes = (\n                    \"NOT_FOUND_ERR SECURITY_ERR ABORT_ERR NOT_READABLE_ERR ENCODING_ERR \"\n                    + \"NO_MODIFICATION_ALLOWED_ERR INVALID_STATE_ERR SYNTAX_ERR\"\n                ).split(\" \")\n                , file_ex_code = file_ex_codes.length\n                , real_URL = view.URL || view.webkitURL || view\n                , real_create_object_URL = real_URL.createObjectURL\n                , real_revoke_object_URL = real_URL.revokeObjectURL\n                , URL = real_URL\n                , btoa = view.btoa\n                , atob = view.atob\n\n                , ArrayBuffer = view.ArrayBuffer\n                , Uint8Array = view.Uint8Array\n                ;\n            FakeBlob.fake = FB_proto.fake = true;\n            while (file_ex_code--) {\n                FileException.prototype[file_ex_codes[file_ex_code]] = file_ex_code + 1;\n            }\n            if (!real_URL.createObjectURL) {\n                URL = view.URL = {};\n            }\n            URL.createObjectURL = function(blob) {\n                var\n                    type = blob.type\n                    , data_URI_header\n                    ;\n                if (type === null) {\n                    type = \"application/octet-stream\";\n                }\n                if (blob instanceof FakeBlob) {\n                    data_URI_header = \"data:\" + type;\n                    if (blob.encoding === \"base64\") {\n                        return data_URI_header + \";base64,\" + blob.data;\n                    } else if (blob.encoding === \"URI\") {\n                        return data_URI_header + \",\" + decodeURIComponent(blob.data);\n                    } if (btoa) {\n                        return data_URI_header + \";base64,\" + btoa(blob.data);\n                    } else {\n                        return data_URI_header + \",\" + encodeURIComponent(blob.data);\n                    }\n                } else if (real_create_object_URL) {\n                    return real_create_object_URL.call(real_URL, blob);\n                }\n            };\n            URL.revokeObjectURL = function(object_URL) {\n                if (object_URL.substring(0, 5) !== \"data:\" && real_revoke_object_URL) {\n                    real_revoke_object_URL.call(real_URL, object_URL);\n                }\n            };\n            FBB_proto.append = function(data/*, endings*/) {\n                var bb = this.data;\n                // decode data to a binary string\n                if (Uint8Array && (data instanceof ArrayBuffer || data instanceof Uint8Array)) {\n                    var\n                        str = \"\"\n                        , buf = new Uint8Array(data)\n                        , i = 0\n                        , buf_len = buf.length\n                        ;\n                    for (; i < buf_len; i++) {\n                        str += String.fromCharCode(buf[i]);\n                    }\n                    bb.push(str);\n                } else if (get_class(data) === \"Blob\" || get_class(data) === \"File\") {\n                    if (FileReaderSync) {\n                        var fr = new FileReaderSync;\n                        bb.push(fr.readAsBinaryString(data));\n                    } else {\n                        // async FileReader won\'t work as BlobBuilder is sync\n                        throw new FileException(\"NOT_READABLE_ERR\");\n                    }\n                } else if (data instanceof FakeBlob) {\n                    if (data.encoding === \"base64\" && atob) {\n                        bb.push(atob(data.data));\n                    } else if (data.encoding === \"URI\") {\n                        bb.push(decodeURIComponent(data.data));\n                    } else if (data.encoding === \"raw\") {\n                        bb.push(data.data);\n                    }\n                } else {\n                    if (typeof data !== \"string\") {\n                        data += \"\"; // convert unsupported types to strings\n                    }\n                    // decode UTF-16 to binary string\n                    bb.push(unescape(encodeURIComponent(data)));\n                }\n            };\n            FBB_proto.getBlob = function(type) {\n                if (!arguments.length) {\n                    type = null;\n                }\n                return new FakeBlob(this.data.join(\"\"), type, \"raw\");\n            };\n            FBB_proto.toString = function() {\n                return \"[object BlobBuilder]\";\n            };\n            FB_proto.slice = function(start, end, type) {\n                var args = arguments.length;\n                if (args < 3) {\n                    type = null;\n                }\n                return new FakeBlob(\n                    this.data.slice(start, args > 1 ? end : this.data.length)\n                    , type\n                    , this.encoding\n                );\n            };\n            FB_proto.toString = function() {\n                return \"[object Blob]\";\n            };\n            FB_proto.close = function() {\n                this.size = this.data.length = 0;\n            };\n            return FakeBlobBuilder;\n        }(view));\n\n    view.Blob = function Blob(blobParts, options) {\n        var type = options ? (options.type || \"\") : \"\";\n        var builder = new BlobBuilder();\n        if (blobParts) {\n            for (var i = 0, len = blobParts.length; i < len; i++) {\n                builder.append(blobParts[i]);\n            }\n        }\n        return builder.getBlob(type);\n    };\n}(typeof self !== \"undefined\" && self || typeof window !== \"undefined\" && window || this.content || this));\n\n```\nExport2Excel.js:\n\n```javascript\n/* eslint-disable */\nrequire(\'script-loader!file-saver\');\nrequire(\'script-loader!./Blob\');  //引用当前目录下的Blob.js模块\nrequire(\'script-loader!xlsx/dist/xlsx.core.min\');\n//由于这几个文件不支持import引入，所以我们需要`script-loader`来将他们挂载到全局环境下\nfunction generateArray(table) {\n    var out = [];\n    var rows = table.querySelectorAll(\'tr\');\n    var ranges = [];\n    for (var R = 0; R < rows.length; ++R) {\n        var outRow = [];\n        var row = rows[R];\n        var columns = row.querySelectorAll(\'td\');\n        for (var C = 0; C < columns.length; ++C) {\n            var cell = columns[C];\n            var colspan = cell.getAttribute(\'colspan\');\n            var rowspan = cell.getAttribute(\'rowspan\');\n            var cellValue = cell.innerText;\n            if (cellValue !== \"\" && cellValue == +cellValue) cellValue = +cellValue;\n\n            //Skip ranges\n            ranges.forEach(function (range) {\n                if (R >= range.s.r && R <= range.e.r && outRow.length >= range.s.c && outRow.length <= range.e.c) {\n                    for (var i = 0; i <= range.e.c - range.s.c; ++i) outRow.push(null);\n                }\n            });\n\n            //Handle Row Span\n            if (rowspan || colspan) {\n                rowspan = rowspan || 1;\n                colspan = colspan || 1;\n                ranges.push({s: {r: R, c: outRow.length}, e: {r: R + rowspan - 1, c: outRow.length + colspan - 1}});\n            }\n            ;\n\n            //Handle Value\n            outRow.push(cellValue !== \"\" ? cellValue : null);\n\n            //Handle Colspan\n            if (colspan) for (var k = 0; k < colspan - 1; ++k) outRow.push(null);\n        }\n        out.push(outRow);\n    }\n    return [out, ranges];\n};\n\nfunction datenum(v, date1904) {\n    if (date1904) v += 1462;\n    var epoch = Date.parse(v);\n    return (epoch - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);\n}\n\nfunction sheet_from_array_of_arrays(data, opts) {\n    var ws = {};\n    var range = {s: {c: 10000000, r: 10000000}, e: {c: 0, r: 0}};\n    for (var R = 0; R != data.length; ++R) {\n        for (var C = 0; C != data[R].length; ++C) {\n            if (range.s.r > R) range.s.r = R;\n            if (range.s.c > C) range.s.c = C;\n            if (range.e.r < R) range.e.r = R;\n            if (range.e.c < C) range.e.c = C;\n            var cell = {v: data[R][C]};\n            if (cell.v == null) continue;\n            var cell_ref = XLSX.utils.encode_cell({c: C, r: R});\n\n            if (typeof cell.v === \'number\') cell.t = \'n\';\n            else if (typeof cell.v === \'boolean\') cell.t = \'b\';\n            else if (cell.v instanceof Date) {\n                cell.t = \'n\';\n                cell.z = XLSX.SSF._table[14];\n                cell.v = datenum(cell.v);\n            }\n            else cell.t = \'s\';\n\n            ws[cell_ref] = cell;\n        }\n    }\n    if (range.s.c < 10000000) ws[\'!ref\'] = XLSX.utils.encode_range(range);\n    return ws;\n}\n\nfunction Workbook() {\n    if (!(this instanceof Workbook)) return new Workbook();\n    this.SheetNames = [];\n    this.Sheets = {};\n}\n\nfunction s2ab(s) {\n    var buf = new ArrayBuffer(s.length);\n    var view = new Uint8Array(buf);\n    for (var i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;\n    return buf;\n}\n\nexport function export_table_to_excel(id) {\n    var theTable = document.getElementById(id);\n    console.log(\'a\')\n    var oo = generateArray(theTable);\n    var ranges = oo[1];\n\n    /* original data */\n    var data = oo[0];\n    var ws_name = \"SheetJS\";\n    console.log(data);\n\n    var wb = new Workbook(), ws = sheet_from_array_of_arrays(data);\n\n    /* add ranges to worksheet */\n    // ws[\'!cols\'] = [\'apple\', \'banan\'];\n    ws[\'!merges\'] = ranges;\n\n    /* add worksheet to workbook */\n    wb.SheetNames.push(ws_name);\n    wb.Sheets[ws_name] = ws;\n\n    var wbout = XLSX.write(wb, {bookType: \'xlsx\', bookSST: false, type: \'binary\'});\n\n    saveAs(new Blob([s2ab(wbout)], {type: \"application/octet-stream\"}), \"test.xlsx\")\n}\n\nfunction formatJson(jsonData) {\n    console.log(jsonData)\n}\nexport function export_json_to_excel(th, jsonData, defaultTitle) {\n\n    /* original data */\n\n    var data = jsonData;\n    data.unshift(th);\n    var ws_name = \"SheetJS\";\n\n    var wb = new Workbook(), ws = sheet_from_array_of_arrays(data);\n\n\n    /* add worksheet to workbook */\n    wb.SheetNames.push(ws_name);\n    wb.Sheets[ws_name] = ws;\n\n    var wbout = XLSX.write(wb, {bookType: \'xlsx\', bookSST: false, type: \'binary\'});\n    var title = defaultTitle || \'列表\'\n    saveAs(new Blob([s2ab(wbout)], {type: \"application/octet-stream\"}), title + \".xlsx\")\n}\n\n```\n**三.在相应vue页面的methods中添加以下方法**\n\n```javascript\n	export2Excel(){\n      require.ensure([],()=>{\n        const {export_json_to_excel } = require(\'./../../lib/Export2Excel.js\')\n        const tHeader = [\'组名\',\'创建时间\']   //自定义列名\n        const filterVal = [\'title\',\'create_date\']   //对应自怼\n        const list = this.tableData   //table数据\n        const data = this.formatJson(filterVal,list);\n        export_json_to_excel(tHeader,data,\'列表excel\');  //导出文件名称\n      })\n    },\n    formatJson(filterVal,jsonData){\n      console.info(jsonData)\n      return jsonData.map(v => filterVal.map(j=> v[j]))\n    },\n    port(){\n      this.export2Excel()\n    },\n```\n**四.绑定到button按钮**\n\n```javascript\n<el-button size=\"small\" type=\"success\" @click=\"port\">导出为excel表格</el-button>\n```\n\n**效果**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190517000308118.gif)', 'vue中导出excel表格文件xlsx', '导出excel,xlsx', 0, 'javascript');
INSERT INTO `article` VALUES (43, '2019-05-17 08:00:51', '2019-12-16 08:00:51', NULL, '#### 需求：扫描二维码登录，生成二维码后需要通过轮询来判断登录状态。\n\n```javascript\nasync getQrcode() {\n      this.clearTimer()\n      let res = await this.$http.post(\"account/loginbyqrcode\")\n      this.loginQrcode = \"data:img/jpg;base64,\" + res.Data.qrcode;\n      this.handleQrcodeCheck();\n    },\nasync handleQrcodeCheck() {\n      let timerId = await new Promise(resovle => {\n        let timerId = setTimeout(async () => {\n          try {\n            let res = await this.$http.post(\"account/checkloginqrcodestatus\");\n            this.clearTimer()\n            this.$message({\n              message: \"登录成功\",\n              type: \"success\"\n            });\n            this.$router.push({ path: \"/home/index\" });\n          } catch (err) {\n            console.log(err);\n            this.handleQrcodeCheck();\n          }\n        }, 1000);\n        resovle(timerId);\n      });\n      this.timerIdEnd = timerId;  //在data中定义，它永远是最后一个定时器的id\n    },\n    clearTimer() {   //清除最近的100个定时器，如果只清除最后一个，会出现bug\n      let end = this.timerIdEnd;\n      let start = end - 100 > 0 ? end - 100 : 0;\n      for (let i = start; i <= end; i++) {\n        clearTimeout(i);\n      }\n    }\n```\n**这里需要注意下，如果用户生成了二维码，开始轮询。用户如果不扫码，当你点击别的页面时，轮询依然会继续，所以我们一定要在跳转页面时也需要清除定时器，不然会一直占用服务器资源。在vue的生命周期函数beforeDestroy加上**\n\n```javascript\n  beforeDestroy() {\n    this.clearTimer()\n  }\n```\n', 'vue中使用定时器实现轮询setTimeout', '轮询,setTimeout', 0, 'vue');
INSERT INTO `article` VALUES (44, '2019-05-23 08:05:31', '2019-12-16 08:05:31', NULL, '#### 需求：点击左右箭头，日期上一天和下一天的切换\n   ![在这里插入图片描述](https://img-blog.csdnimg.cn/20190523160229987.gif)\n **DatePicker.vue**\n \n\n```javascript\n<template>\n  <div>\n    <el-form-item>\n      <el-button type=\"primary\" size=\"mini\" @click=\"dateChange(0)\">\n        <i class=\"el-icon-caret-left\"></i>\n      </el-button>\n      <el-date-picker\n        style=\"width:140px\"\n        v-model=\"date\"\n        type=\"date\"\n        size=\"small\"\n        placeholder=\"选择日期\"\n      ></el-date-picker>\n      <el-button type=\"primary\" size=\"mini\" @click=\"dateChange(1)\">\n        <i class=\"el-icon-caret-right\"></i>\n      </el-button>\n    </el-form-item>\n  </div>\n</template>\n<script>\nexport default {\n  data() {\n    return {\n        date: new Date(),\n    };\n  },\n  methods: {\n      dateChange(flag) {\n      let date = this.date;\n      if (flag == 1) {\n        this.date = new Date(date.setDate(date.getDate() + 1));\n      } else {\n        this.date = new Date(date.setDate(date.getDate() - 1));\n      }\n    },\n  }\n};\n</script>\n\n<style scoped>\n</style>\n```\n\n   **父组件**\n   \n\n```javascript\n<script>\nimport DatePicker from \"./../../components/DatePicker.vue\";   //1.导入该组件\nexport default {\n  data() {\n    return {\n      tableData: [],\n      total: 0,\n      page: 1,\n      listLoading: false,\n      dialogVisible: false,\n      size: 10,\n    };\n  },\n  components: {DatePicker}, //2.注册组件\n```\n\n```html\n<el-form :inline=\"true\">\n   <el-form-item>数据管理</el-form-item>\n   <el-form-item>\n     <date-picker></date-picker>    //3.使用该组件，注意名字\n   </el-form-item>\n</el-form>\n```\n**父组件主动获取子组件的数据和方法**\n1.调用子组件的时候 定义一个ref\n\n```html\n<date-picker ref=\"datePicker\"></date-picker>\n```\n2.在父组件里面通过\n\n```javascript\nthis.$refs.datePicker.属性\nthis.$refs.datePicker.方法\n```\n\n**子组件里面获取父组件的数据和方法**\n```javascript\nthis.$parent.属性\nthis.$parent.方法\n```\n', '封装element的日期组件', 'element-ui,封装组件', 0, 'vue');
INSERT INTO `article` VALUES (45, '2019-05-26 08:08:40', '2019-12-16 08:08:40', NULL, '#### 需求：在上传文件之前，需要预览txt文件的内容，确定格式正确再上传到服务器。chrome浏览器可完美支持\n通常js对于安全性的考虑是不建议进行文件的读写。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190523170744253.gif)\n**templete**\n```html\n<el-row>\n  <label>数据文件</label>\n  <input type=\"file\" id=\"uploadFile\" class=\"file\" @change=\"fileChange\">  //当选中一个文件，触发该方法\n</el-row>\n```\n**script**\n\n```javascript\nreadFile(file) {\n      return new Promise(function(resolve, reject) {\n        let reader = new FileReader();\n        reader.readAsText(file);\n        reader.onload = function(e, rs) {\n          resolve(e.target.result);\n        };\n      });\n    },\nfileChange() {\n      let file = document.getElementById(\"uploadFile\").files[0];\n      let vm = this;\n      this.readFile(file).then(res => {\n        let arr = res.split(/[\\n]/);\n        arr.forEach((item, index) => {\n          let arr2 = item.split(\"----\");\n          let obj = {\n            name: arr2[0],\n            sex: arr2[1],\n            age: arr2[2]\n          };\n          vm.$set(vm.fileData, index, obj);  //这里一定要用Vue.set(),不然视图不会更新\n        });\n        vm.dialog2Visible = true;   //显示一个dialog里面放一个table，将this.fileData的数据与之绑定即可\n      });\n    },\n```\n**txt文件模板:**\n注意在txt文件的每一行不要有多余的空格\n```\n张三----男----23\n李四----男----22\n李艳----女----20\n```\n', 'js读取本地txt文件，实现表格预览', '读取文件,内容预览', 0, 'javascript');
INSERT INTO `article` VALUES (46, '2019-05-26 08:10:15', '2019-12-16 08:10:15', NULL, '## 一.vue项目打包\n1. **修改config/index.js的assetsPublicPath为 ./（注意一定是**build**里面的，下面**dev**中也有这个配置）**\n![!\\[在这里插入图片描述\\](https://img-blog.csdnimg.cn/20190526172551783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjU2NTEzNw==,size_16,color_FFFFFF,t_7](https://img-blog.csdnimg.cn/20190526172928885.png)\n这个路径的配置很重要，默认是项目名称。如果没有修改路径会变成这样，访问不到打包后的文件。就算返回200，你会发现返回的根本不是那些打包后的文件。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190526173514687.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjU2NTEzNw==,size_16,color_FFFFFF,t_70)\n2. **打包成dist文件**\n\n```javascript\nnpm run build\n```\n这时我们就可以把生成的dist文件扔到服务器就可以了。我这里使用xshell进行远程连接，xftp进行文件传输。\n## 二.配置nginx\n1. **安装nginx**\n安装的步骤我这里不详细介绍，安装后通过**nginx -v** 可测试是否安装成功\n\n2. **修改nginx的配置文件**\n默认路径：\n```\nvim /etc/nginx/nginx.conf \n```\n在 http{ } 中配置一个server\n\n```c\nserver {\n              listen 8080;     #1.你想让你的这个项目跑在哪个端口\n              server_name 47.94.76.91;     #2.当前服务器ip\n       location / {\n           root   /home/dist/;     #3.dist文件的位置(我是直接放在home目录下了) \n            try_files $uri $uri/ /index.html;     #4.重定向,内部文件的指向(照写)\n       }\n        location /api {  #4.当请求跨域时配置端口转发\n            proxy_pass http://47.92.76.97:8848/api; #5.转发地址\n        } \n       }\n\n```\n跨域问题在这里着重说一下：\n1. 这里的跨域配置是打包后，nginx做的代理转发。在开发模式的proxytable没有任何关系。\n2. 如果nginx不进行跨域的配置，虽然项目部署了，但是服务根本就会访问不到\n3. 关于跨域的介绍可以看我的另外一篇文章 https://blog.csdn.net/weixin_42565137/article/details/90578780\n\n## 三.开放端口\n像阿里云的服务器都需要开通端口才可以访问的。这个不做详细介绍。\n然后我们重启nginx就可以访问我们部署的项目了 service nginx restart', 'vue项目部署到nginx', '部署,上线', 0, 'vue,nginx');
INSERT INTO `article` VALUES (47, '2019-06-03 09:00:59', '2019-12-16 09:00:59', NULL, '最近在学习Go语言的iris框架和gorm，发现资料还是挺少的。自己写了一个管理图书的增删改查项目。\n\n希望能给想入门go语言的朋友一个参考。\n\n### 项目地址\nhttps://github.com/pppercyWang/iris-gorm-demo\n\n### 项目结构\n```go\nconf 配置文件\ncontrollers 控制器 接受参数 api的入口\ndatasource 数据库配置\nmodels 结构体模型\nrepo 数据库的操作\nroute 注册路由\nservice 业务逻辑代码\nutils 工具类\nconfig.json 配置文件的映射\nmain.go 主程序入口\n```\n\n\n\n下载项目后，安装好依赖。将配置改成自己的。\n\n```\ngo run main.go\n```\n就可以跑起来了。注意models的init方法，引入datasource包的时候会自动检查你的数据库有没有book表，如果没有会根据结构体自动建表\n我把代码写的尽量精简，也有注释。如果有写的不好的地方，欢迎指正\n\n\n', 'Go语言Iris框架+Gorm 增删改查分页API项目restful新手向', 'restful,iris,gorm', 0, 'golang');
INSERT INTO `article` VALUES (48, '2019-06-03 09:02:35', '2019-12-16 09:02:35', NULL, '最近写的产品中有很多的页面都进行了数据的表格展示，我这里写了一个demo，总结一下对于el-table的合理使用。因为就只有一个页面，我就直接写在app.vue中了。\n服务端我是用go语言写的，感兴趣的朋友可以看我的另一篇文章：\nhttps://blog.csdn.net/weixin_42565137/article/details/90753197\n### 效果演示\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190603174534619.gif)\n### 项目地址\nhttps://github.com/pppercyWang/lib-ui\n这个是对应lib-api的前端代码\n下载项目后，安装好依赖。npm run dev就可以跑起来了\n如果有写的不好的地方，欢迎指正', 'vue+element-ui优雅的实现表格的增删改查', 'crud,table,element', 0, 'vue');
INSERT INTO `article` VALUES (49, '2019-06-09 09:03:58', '2019-12-16 09:03:59', NULL, '### Go语言的参数只能是值传递\n值传递是一个拷贝的过程\n\nGo:值传递\n```go\nfunc bbb(list [4]int){\n   for i,_ := range list{\n      list[i] = 0\n   }\n}\nfunc main(){\n   list := [4]int{1,2,3,4}\n   bbb(list)\n   fmt.Println(list )   //[1 2 3 4]\n}\n\n```\n\nJavascript: 引用传递\n```javascript\nlet list = [1,2,3,4]\nfunction  bbb(list){\n    list.forEach((item,index)=>{\n        list[index] = 0\n    })\n}\nbbb(list)\nconsole.log(list)   //[0,0,0,0]\n```\n但是Go语言可以通过指针来实现引用传递的作用\n\n```go\nfunc bbb(p2 *[4]int){    //接受一个[4]int的指针\n   for i,_ := range p2{\n      p2[i] = 0\n   }\n}\nfunc main(){\n   list := [4]int{1,2,3,4}\n   p := &list\n   bbb(p)     //传递指针\n   fmt.Println(list )   //[0 0 0 0]\n}\n```\n既然说go语言的参数传递只能是值传递，所以这里实际上是把指针地址拷贝了一份，而两个地址都指向了main函数的变量list的地址，所以才使list的值发生了改变\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190609203729513.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjU2NTEzNw==,size_16,color_FFFFFF,t_70)', 'go语言的值传递', '值传递,指针', 0, 'golang');
INSERT INTO `article` VALUES (50, '2019-06-09 09:05:29', '2019-12-16 09:05:29', NULL, '### 数组\n**一.定义数组**\n1.如果用var定义，可以不设置初值，但必须给定长度\nvar arr1 [5] int\n2.如果用 := 就一定要定义初值\narr2 := [4]int{1,2,3,4}\n3.可以不定义数组长度，就必须在[]加... ，会根据初值给与长度。**空的[]是切片 数组必须定义长度**\narr3 := [...]int {1,2,3,4,5,6}\n**二.遍历数组**\n1.普通遍历\n```go\nfor i:=0 ; i<len(arr2);i++{\nfmt.Println(arr2[i])\n}\n```\n2.使用range\n```go\nfor i,v :=range(arr2){   // i为index，v为值\nfmt.Println(i,v)\n}\n```\n**三.数组是值传递**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190609204314729.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjU2NTEzNw==,size_16,color_FFFFFF,t_70)\n如果在printArray方法中对传进来的参数arr改变其值，在main方法中的arr1或arr3是不会改变的，这就是值传递。值传递是一个拷贝的过程\n**四.通过指针来实现引用传递的作用**\n```go\nfunc bbb(list *[4]int){    //接受一个[4]int的指针 \n   for i,_ := range list{\n      list[i] = 0\n   }\n}\nfunc main(){\n   list := [4]int{1,2,3,4}\n   bbb(&list)     //通过取地址符传递地址，所有指针变量的值都是地址\n   fmt.Println(list )   //[0 0 0 0]\n}\n```\n如果这里不理解值传递和引用传递的区别，可以看我的另外一篇文章 **Go语言的值传递**\nhttps://blog.csdn.net/weixin_42565137/article/details/91356974\n### 数组总结：\n如果在函数传递时传递数组，那就必须要传递一个数组长度相同的数组变量，这是十分不方便的。\n所以，**在大多数情况，我们会使用切片，而不是数组**\n\n### 切片\n**一.切片可以理解为数组的映射**\n s:=arr[2:] 映射arr数组索引为2到最后的这一范围（arr[:]代表整个范围，类似的还有arr[1:3]arr[3:]）\n```go\nfunc handleSlice(arr []int){\n   for i,_ := range arr{\n      arr[i] = 10\n   }\n}\n\nfunc main(){\n   arr := [5]int{1,2,3,4,5}\n   slice := arr[2:]\n   handleSlice(slice)\n   fmt.Println(arr)  //[1,2,10,10,10]\n}\n```\n但我们发现，这里我们没有用指针，但是为什么arr的值也改变了呢。因为之前说到go语言只支持值传递。我们可以认为这里是将arr索引为2到最后的这一范围的映射作为参数传递了，进行了一次拷贝，而这两个映射都是指向同一个数组，所以，printArray方法的切片改变了，main方法中的arr也进行了改变\n\n**二.定义切片**\n*直接定义切片也会生成一个相同长度容量的数组作为映射*\n```go\nfunc printS(s []int){\n	fmt.Printf(\"len: %d   cap: %d  slice: %d\\n\",len(s),cap(s),s)\n}\nfunc main(){\n   //不指定长度和容量\n   var s1 []int\n   s2 := []int{1,2,3,4} \n   //指定长度\n   s3 := make([]int,2)\n   //指定长度和容量\n   s4 := make([]int,3,16) \n   printS(s1)   //len: 0   cap: 0  slice: []\n   printS(s2)   //len: 4   cap: 4  slice: [1 2 3 4]\n   printS(s3)   //len: 2   cap: 2  slice: [0 0]\n   printS(s4)   //len: 3   cap: 16  slice: [0 0 0]\n}\n```\n**三.给切片添加元素**\n```go\ns1 := []int {1,2,3}\ns2 := []int {4,5,6}\nfmt.Println(append(s1,4,5,6))\nfmt.Println(append(s1,s2...))\n```\n**四.切片的拷贝：**\n```go\ns1 := make([]int,4)\ns2 := []int{1,2,3,4}\ncopy(s1,s2)  //parms1:dest parms2:src\nfmt.Println(s1)  //[1 2 3 4]\n//这里注意，s1的长度一定要大于等于s2才能全部拷贝\ns1 := make([]int,3)\ns2 := []int{1,2,3,4}\ncopy(s1,s2)  //parms1:dest parms2:src\nfmt.Println(s1)  //[1 2 3]\n```\n**四.从切片中间删除元素：**\n```go\ns := []int{1,2,3,4}\ns = append(s[:1],s[2:]...)\nfmt.Println(s)\n```\n**五.从切片头部删除元素**\n```go\ns := []int{1,2,3,4}\ns = s[1:]\nfmt.Println(s) //[2 3 4]\n```\n**六.从切片尾部删除元素**\n```go\ns := []int{1,2,3,4}\ns = s[:len(s)-1]\nfmt.Println(s) //[1 2 3]\n```', 'go语言的数组与切片', '切片,golang', 0, 'golang');
INSERT INTO `article` VALUES (51, '2019-06-13 09:06:49', '2019-12-16 09:06:49', NULL, '最近在使用Element开发时 一开始按照官网示例 产品前期没什么问题 到了后期 遇到这样一个情况：**并不是只有点击导航栏才跳转页面** \n#### 需求：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613235043973.gif)\n如果根据官网的示例，每个el-menu-item的index都为\'1-1\'  \'1-2\'之类的。如果直接跳转路由，你会发现导航栏当前激活菜单的 index没有改变。**点击跳转。但菜单栏依旧停留在分组这个栏目**\n\n**只有两种方法可以解决这个问题：**\n1. 通过子组件的this.$emit方法触发父组件绑定的事件，改变default-active属性值\n2. 通过vuex储存el-menu的default-active属性值，在子组件的点击事件改变这个属性值\n\n但是我试了第一种方法，没有生效。可能需要watch这个变量才能响应。这两种方法可能比较麻烦，后来发现一个很有效的方法。废话不多说。代码如下\n\n#### 正确用法：\n```javascript\n<el-menu\n        :default-active=\"$route.path\"\n        class=\"el-menu-vertical-demo\"\n        :collapse=\"isCollapse\"\n        router\n        overflow-y:\n        scroll\n      >\n        <el-submenu index=\"1\">\n          <template slot=\"title\">\n            <i class=\"el-icon-menu\"></i>\n            <span slot=\"title\">账号管理</span>\n          </template>\n          <el-menu-item index=\"/demo/index\">列表</el-menu-item>\n          <el-menu-item index=\"/demo/group/index\">分组</el-menu-item>\n        </el-submenu>\n</el-menu>\n```\n#### 总结：\n将default-active设置为\\$route.path，el-menu-item的index设为要跳转的路由（并且点击菜单项，会直接push到点击的页面)。注意：一定要设置el-submenu的index属性（1，2，3...）。不然会出bug\n\n这样就无需关心default-active的属性值了。只要路由改变了，对应的菜单项也会激活', 'Element el-menu(NavMenu)的正确用法', 'element,menu,router', 0, 'vue');
INSERT INTO `article` VALUES (52, '2019-06-21 09:08:09', '2019-12-16 09:08:10', NULL, '#### 搭建环境\n1. 安装erlang（rabbitMQ依赖erlang）\nwget http://www.rabbitmq.com/releases/erlang/erlang-19.0.4-1.el7.centos.x86_64.rpm\n2. 安装rabbitMQ\nwget http://www.rabbitmq.com/releases/rabbitmq-server/v3.6.10/rabbitmq-server-3.6.10-\n1.el7.noarch.rpm\n3. 启动\nsystemctl start rabbitmq-server\n4. 停止\nrabbitmqctl stop\n#### 安装management插件：\n1. 查看插件\nrabbitmq-plugins list\n2. 安装插件\nrabbitmq-plugins enable rabbitmq_management\n3. 关闭防火墙后可以访问管理界面\nsystemctl stop firewalld.service  临时关闭\nsystemctl disable firewalld.service 禁用\n4. 如果是安装在本地，访问管理界面\nhttp://localhost:15672/\n5. 登录admin账户。用户名guest，密码guest\n\n**出于安全的考录，guest用户只能通过localhost登陆使用**\n#### 安装在服务器登录guest用户：\n\n1. cd /usr/share/doc/rabbitmq-server-3.6.10\n 这里有一个rabbitmq.config.example文件。将其复制到 /etc/rabbitmq/\n2. cp rabbitmq.config.example /etc/rabbitmq/rabbitmq.config\n3.  vi rabbitmq.config\n修改 {loopback_users, []} 注意把注释和后面的逗号去掉\n4.  访问 http://192.168.85.236:15672\n5.  成功登录guest用户', 'centos7安装配置rabbitMQ以及登录管理界面', 'rabbitmq,教程', 0, 'linux,golang');
INSERT INTO `article` VALUES (53, '2019-06-21 09:12:39', '2019-12-16 09:12:39', NULL, '\n### 一.数据库表结构结构的设计\n1. 能够用数字类型的字段尽量选择数字类型而不用字符串类型的（比如电话号码），这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接回逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。\n2. 对于字符类型的选择。char查询快，但是耗存储空间，varchar查询相对慢一些但是节省存储空间。在设计字段的时候可以灵活选择，例如用户名、密码等长度变化不大的字段可以选择CHAR，对于评论等长度变化大的字段可以选择VARCHAR。\n3. 字段的长度在最大限度的满足可能的需要的前提下，应该尽可能的设得短一些，这样可以提高查询的效率，而且在建立索引的时候也可以减少资源的消耗\n### 二.查询的优化 \n1. 保证在实现功能的基础上，尽量减少对数据库的访问次数\n2. 通过搜索参数，尽量减少对表的访问行数,最小化结果集，从而减轻网络负担\n3. 不要使用SELECT * FROM T1。要用到几列就选择几列如：SELECT COL1,COL2 FROM T1；\n4. 尽量将多条SQL语句压缩到一句SQL中。每次执行SQL的时候都要建立网络连接、进行权限校验、进行SQL语句的查询优化、发送执行结果，这个过程是非常耗时的，因此应该尽量避免过多的执行SQL语句，能够压缩到一句SQL执行的语句就不要用多条来执行\n5. 在in和exists中通常情况下使用EXISTS，因为in不走索引\n\n#### 索引：\n**不管何种调优方式，索引是最根本的方法，是一切优化手法的内功。创建索引给检索带来的性能提升往往是巨大的，因此在发现检索速度过慢的时候应该首先想到的就是创建索引**\n1. 在经常需要进行检索的字段上创建索引，比如要按照姓名进行检索，那么就应该在姓名字段上创建索引\n2. 经常需要进行检索的字段：\n作为主键的列上\n经常需要排序的列上\n经常使用在where子句上面的列上\n3. 避免在索引上使用计算\n在where字句中，如果索引列是计算或者函数的一部分，DBMS的优化器将不会使用索引而使用全表查询\n        效率低：select * from person where salary*12>25000(salary是索引列)\n        效率高：select * from person where salary>25000/12(salary是索引列)\n4. 什么时候索引会失效：\n条件中用or\nlike的模糊查询以%开头\n如果列类型是字符串，那一定要在条件中将数据使用引号引用起来，否则不会使用索引', '数据库调优', '数据库,性能', 0, 'mysql');
INSERT INTO `article` VALUES (54, '2019-07-08 09:15:24', '2019-12-16 09:15:24', NULL, '**最近经常看到Typescript的一些文章。决定自己也尝试用一下，写了一个移动端和PC端的项目模板。感觉还不错。可能vue2.x和对ts的支持不是很好（期待vue3，将用ts重构）。期间遇到了一个最大的坑，找了挺久没有找到问题所在，最后解决了。跟大家分享一下**\n### 页面上报的错：\n\n1. Property or method \"xxx\" is not defined on the instance but referenced during render\n2. Uncaught TypeError: Cannot create property \'isRootInsert\' on string \'xxx\'\n3. Error in nextTick: \"TypeError: Cannot read property \'_enterCb\' of undefined\"\n4. TypeError: Cannot read property \'_enterCb\' of undefined\n\n第一个错误你会很纳闷，明明我定义了这个变量，但是还是说not defined\n然后就是路由跳转的问题，你会发现路由会变，但是视图不能正常的渲染\n\n**A.vue**\n```javascript\n<template>\n  <div class=\"home\">\n   {{msg}}\n  </div>\n</template>\n<script lang=\'ts\'>\nimport { Component, Vue, Watch, Prop } from \"vue-property-decorator\";\nimport { Action, Mutation, State, Getter } from \"vuex-class\";\n@Component({\n  components: {\n  }\n})\nexport default class  extends Vue {\n private msg: string = \'我是一个msg\';\n}\n</script>\n<style lang=\"sass\">\n</style>\n```\n### 解决方法：\n原因是我们没有注册这个组件。通常我们在写vue的时候，如果不用其他的组件就不会用Component注册组件\n但这里不管你用不用，都要写@Component。不然就会出现以上问题\n\n```javascript\n@Component({\n  components: {\n  }\n})\n```\n### Vue+Typescript的PC端管理平台模板：\nhttps://github.com/pppercyWang/vue-typescript-admin\n\n### Vue+Typescript的移动端项目模板：\nhttps://github.com/pppercyWang/vue-typescript-mobile', 'vue+typescript使用vue-router路由不正常跳转采坑记录', '踩坑,router', 0, 'typescript,vue');
INSERT INTO `article` VALUES (55, '2019-07-09 09:18:39', '2019-12-16 09:18:39', NULL, '关于vuex，我们听到最多的是vuex是一个状态管理容器，可以解决组件之间通信的痛点。但vuex真的只是这样吗？\n\n平时，我更喜欢将vuex比喻成一个**前端程序的数据库**。他可以储存各种数据，需要什么直接过去拿就行。我们都知道，单页面应用只要页面跳转了，data中的数据都会清空。但store中的数据不会清空，只有在页面刷新时，会清空store中的数据\n\n### 一.那我们是不是可以这样设计？\n**当我们需要获取数据时，在action中发起请求，然后将数据直接放到store里面。每当我们进入这个页面，都先判断一下store中有没有这些数据，如果有就直接拿，没有的话就通过action发出请求**\n\n### 二.实际应用\n#### 场景说明：\n这是一个移动端的产品，首页有轮播图组件。每次我们进入这个页面，都需要发起请求获取轮播图的一些数据。大家可以想像一下。通常我们我们使用这个应用的时候，点击美食 > 退回首页 > 点击酒店 >退回首页 ......\n\n我们进入首页的时候非常多，如果每次进入这个页面，都从created钩子去获取数据，会发起很多次请求。其实这是根本没有必要的。利用之前的思想，我们就可以实现如下效果。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190709101809911.gif)\n#### Demo地址：\n https://github.com/pppercyWang/vue-typescript-mobile\n**关于分页数据的处理可以看这个PC端的管理平台模板**\nhttps://github.com/pppercyWang/vue-typescript-admin\n### 三.那我所有的请求都要在action中去请求，然后存在store中吗？\n其实是没有必要的。比如说一些列表的数据可以放在store中。但是一些短暂性的请求（比如删除，修改）就直接写在methods中就可以了。\n如果有讲的不好的地方，欢迎指正。qq:845082868\n### 四.总结\n**Vuex大法好！**', 'vuex在vue工程的正确使用', 'vuex,状态管理', 0, 'vue');
INSERT INTO `article` VALUES (56, '2019-07-15 09:22:10', '2019-12-16 09:22:11', NULL, '图标库是iconfont，这里面的图标够用了吧\n### 一.新建项目\n![image.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNjEzOTIyMy03ZmUyZjkwZDBiMDg2NWMwLnBuZw)\n### 二.选择喜欢的图标，加入购物车，再添加到项目\n\n\n### 三.生成代码\n![image.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNjEzOTIyMy01Y2M1N2RlY2Q4NjFkNzdlLnBuZw)\n### 四.将链接粘贴到地址栏，将css内容复制到icon.css\n![image.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNjEzOTIyMy0yZGQxZTU3Nzk3NjUyNWM3LnBuZw)\n### 五.在App.vue进行全局引用\n![image.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNjEzOTIyMy0yN2MyN2U4ZDE4NTU4ZTI1LnBuZw)\n\n### 六.在相应组件使用van-icon，iconfont类是必须要有的，不同的图标就是不同的percy-icon-xxxx\n![image.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNjEzOTIyMy1jNmE3ZGI3ZWM4NWJmMGY3LnBuZw)\n\n', 'vant中van-icon使用自定义图标简单粗暴', 'vant,icon', 0, 'vue');
INSERT INTO `article` VALUES (57, '2019-07-28 09:23:12', '2019-12-16 09:23:12', NULL, '## 效果演示\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190725102106599.gif)\n**直接上代码**\n```javascript\n<template>\n      <div class=\"skeleton\" v-show=\"skeletonShow\">\n        <van-skeleton :row=\"3\" row-width=\"160\" />\n        <van-skeleton :row=\"3\" row-width=\"160\" />\n        <van-skeleton :row=\"3\" row-width=\"160\" />\n      </div>   \n</template>\n\n<style scoped lang=\"scss\">\n.skeleton {\n  .van-skeleton {\n    display: inline-block;\n    width: 50px;\n    margin: 0px 22px;\n    .van-skeleton__content {\n      width: 50px;\n    }\n    .van-skeleton__row {\n      height: 50px;\n      margin: 17px 0px;\n    }\n  }\n}\n</style>\n```\n### 使用场景\nhttps://github.com/pppercyWang/vue-typescript-mobile\n### Vant还是非常好用的\nhttps://youzan.github.io/vant/#/zh-CN/intro', 'vue+vant使用skeleton组件实现骨架屏', 'vant,骨架屏', 0, 'vue');
INSERT INTO `article` VALUES (58, '2019-07-28 09:30:48', '2019-12-16 09:30:48', NULL, '### 为什么要用精灵图？\n比如京东首页的这些icon，如果每个icon都去请求一个资源。是非常浪费资源的。因为我们浏览器在同一个域名下并发加载的资源(CSS、JS 、图片等)数量是有限的。\n\n我们可以将这些icon**放到一张图片，通过截取这张图片的不同的区域，拿到不同的icon**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190728221208886.png)\n### 制作一个背景透明的Icon\n1. 截图你喜欢的logo，最好是正方形。\n ![在这里插入图片描述](https://img-blog.csdnimg.cn/20190728215724356.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjU2NTEzNw==,size_16,color_FFFFFF,t_70)\n2. 打开ps，使用快速选择工具\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190728215909502.png)\n3. 选择白色区域ctrl+x删除。调节这个可以改变选择精度。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190728220131603.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjU2NTEzNw==,size_16,color_FFFFFF,t_70)\n4. 这样就OK了。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190728220300535.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjU2NTEzNw==,size_16,color_FFFFFF,t_70)\n5. img标签引用。设置width，height改变大小，不然图片可能会变形\n```\n<img src=\"@/../public/img/home.png\"  style=\"width:30px;height:30px\"/>\n```\n### 制作精灵图\n**非常好用的精灵图制作网站 自动生成css：https://sprite.ydr.me/**\n\n**图片大小修改：https://www.sojson.com/image/change.html**\n', '前端必备技能之如何制作精灵图', '精灵图,性能', 0, 'javascript');
INSERT INTO `article` VALUES (59, '2019-08-09 09:32:24', '2019-12-16 09:32:24', NULL, '不知道大家有没有遇到这种情况。平时过于依赖组件库，如果产品对某个组件有特殊的要求。我们与其去改，去覆盖组件库的源码。还不如自己写一个组件，毕竟是自己写的，不管你想怎么改，都方便容易的很。这里就实现一个dialog组件和input组件，不基于任何组件库。供大家参考\n### 效果展示\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190809140334324.gif)![在这里插入图片描述](https://img-blog.csdnimg.cn/20190809140326635.gif)\n### MDialog.vue\n```javascript\n<template>\n  <transition name=\"fade\">\n    <div class=\"dialog-mask\">\n      <div class=\"dialog-wrapper animated fadeInUp\" ref=\"dialogWrapper\">\n        <div class=\"dialog-container\">\n          <div class=\"dialog-header\">{{title}}</div>\n          <div class=\"dialog-body\">\n            <slot></slot>\n          </div>\n          <div class=\"dialog-footer\">\n            <div class=\"left i-block\" @click=\"dialogClose\">{{cancel}}</div>\n            <div class=\"right i-block\" @click=\"submit\">{{confirm}}</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </transition>\n</template>\n<script lang=\'ts\'>\nimport { Component, Vue, Watch, Prop } from \"vue-property-decorator\";\nimport \'@/../public/css/animate.min.css\';\n@Component({\n  components: {}\n})\nexport default class extends Vue {\n  @Prop()\n  private title!: string;\n  @Prop()\n  private cancel!: string;\n  @Prop()\n  private confirm!: string;\n  private dialogClose() {\n    this.$emit(\"close\");\n  }\n  private submit() {\n    this.$emit(\"submit\");\n  }\n}\n</script>\n<style scoped lang=\"scss\">\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.4s;\n}\n.fade-enter,\n.fade-leave-active {\n  opacity: 0;\n}\n.dialog-mask {\n  background-color: rgba(0, 0, 0, 0.5);\n  position: fixed;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  z-index: 99;\n  display: table;\n  animation-duration: 0.6s;\n  .dialog-wrapper {\n    display: table-cell;\n    vertical-align: middle;\n    animation-duration: 0.3s;\n    .dialog-container {\n      margin: auto;\n      top: 50%;\n      background-color: white;\n      width: 260px;\n      height: 150px;\n      border-radius: 12px;\n      .dialog-header {\n        background-color: #f3fff7;\n        color: #42b983;\n        height: 32px;\n        border-radius: 12px 12px 0 0;\n        border-bottom: 1px solid #cccccc;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        font-size: 13px;\n        color: #38c26b;\n      }\n      .dialog-body {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        margin: 20px 0;\n        height: 50px;\n        font-size: 13px;\n      }\n      .dialog-footer {\n        height: 40px;\n        width: 100%;\n        background-color: #ffffff;\n        border-radius: 0 0 12px 12px;\n        display: table;\n        .left {\n          width: 50%;\n          height: 100%;\n          vertical-align: middle;\n          display: table-cell;\n          font-size: 13px;\n          color: #38c26b;\n        }\n        .right {\n          width: 50%;\n          height: 100%;\n          vertical-align: middle;\n          display: table-cell;\n          font-size: 13px;\n          color: #38c26b;\n        }\n        .left:hover {\n          cursor: pointer;\n        }\n        .right:hover {\n          cursor: pointer;\n        }\n      }\n    }\n  }\n}\n</style>\n```\n### DialogInput.vue\n```javascript\n<template>\n  <div class=\"input-wrap\">\n    <input\n      type=\"text\"\n      :value=\"value\"\n      :placeholder=\"placeholder\"\n      @input=\"$emit(\'input\',$event.target.value)\"\n    />\n  </div>\n</template>\n<script lang=\'ts\'>\nimport { Component, Vue, Watch, Prop } from \"vue-property-decorator\";\n@Component({\n  components: {}\n})\nexport default class extends Vue {\n  @Prop()\n  private value!: string;\n  @Prop()\n  private placeholder!: string;\n}\n</script>\n<style scoped lang=\"scss\">\n.input-wrap {\n  border: 1px solid #56d16a;\n  border-radius: 5px;\n  height: 32px;\n  width: 90%;\n  background-color: #f3fff7;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  input {\n    background-color: #f3fff7;\n    font-size: 13px;\n    height: 25px;\n    width: 95%;\n    border: 0px;\n    text-indent: 3px;\n  }\n}\n</style>\n```\n### 父组件中使用\n```javascript\n<m-dialog\n      @close=\"closeDialog\"\n      @submit=\"handleSubmit\"\n      v-if=\"visible\"\n      cancel=\"取消\"\n      confirm=\"确定\"\n      title=\"提示\"\n    >\n      <dialog-input placeholder=\"请输入手机号码\" v-model=\"value\"></dialog-input>\n      <!-- 您确定要取消该订单吗 -->\n</m-dialog>\n```\n这里script部分是用ts写的，你可以改成vue的语法。template和style部分不用改。\n窗体部分使用了animate.css的动画，直接下好css,在script导入就可以了。遮罩层使用了transition做fadein fadeout效果', 'vue实现自定义dialog组件', '组件,dialog', 0, 'vue');
INSERT INTO `article` VALUES (60, '2019-08-13 09:34:30', '2019-12-16 09:34:30', NULL, '\n之前缺乏移动端的经验。一直不知道上拉加载，下拉刷新是怎么实现的。现在正好有个产品有这样一个需求。想了一会没有思路。就去找插件。啥vue-infinite-scroll，vue-virtual-scroll-list。啊呀，牛!无限滚动，十万条数据渲染。\n\n经过我一大圈的折腾。还是默默的卸载了插件。我只是需要实现一个下拉加载，不需要其他这么多的功能。看了看其他人的源码，直接撸了起来，实现一个List组件。\n### 效果展示\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190813095859927.gif)\n### MList.vue\n```\n<template>\n  <div class=\"list-wrap\">\n    <div class=\"content\" ref=\"list\" @scroll=\"onScroll\">\n      <slot></slot>\n    </div>\n    <div class=\"loading\" v-show=\"loading\">正在加载数据......</div>\n  </div>\n</template>\n<script lang=\'ts\'>\nimport { Component, Vue, Watch, Prop } from \"vue-property-decorator\";\n@Component({\n  components: {}\n})\nexport default class extends Vue {\n  @Prop()\n  private loading!: boolean;\n  private onScroll() {\n    const obj: any = this.$refs.list;\n    // clientHeight 视口高度 scrollTop 滚动条离顶部的高度 scrollHeight 列表内容的高度\n    if (obj.clientHeight + obj.scrollTop === obj.scrollHeight) {\n      this.$emit(\"toBottom\");\n    }\n  }\n}\n</script>\n<style scoped lang=\"scss\">\n.list-wrap {\n  width: 100%;\n  height: 100%;\n  position: relative;\n  .content {\n    width: 100%;\n    height: 100%;\n    overflow-y: scroll;\n  }\n  .loading {\n    position: absolute;\n    bottom: -20px;\n    width: 100%;\n    height: 20px;\n    color: #ffffff;\n  }\n}\n::-webkit-scrollbar { // 去除滚动条边框\n  width: 0 !important;\n}\n::-webkit-scrollbar {\n  width: 0 !important;\n  height: 0;\n}\n</style>\n```\n### 使用组件\n```\n<div class=\"body\">\n      <m-list @toBottom=\"fetchNewData()\" :loading=\"loading\">\n        <code-info class=\"item\" v-for=\"(item,index) in dataList\" :key=\"index\"></code-info>\n      </m-list>\n</div>\n\n  private dataList: any[] = [1, 2, 3, 4, 5, 6, 7, 8];\n  private loading: boolean = false;\n  private fetchNewData() {\n    this.loading = true;\n    setTimeout(() => {\n      this.dataList.push(1, 2, 3);\n      const ref: any = this.$refs.vueLoad;\n	  this.loading = false;\n    }, 1000);\n  }\n```\n**这里需要注意的是m-list的父容器一定要固定高度，本例为body。**', '实现下拉加载根本没那么复杂', '下拉加载,性能', 0, 'javascript,vue');
INSERT INTO `article` VALUES (61, '2019-08-14 09:51:22', '2019-12-16 09:51:22', NULL, '不知道大家在用一些UI框架，比如Element-ui的时候，有没有觉得一些全局组件。this.$message(),this.Toast()等，用起来很爽。他们不像其他的组件，需要去导入，去注册。麻烦的很。\n看了Element的源码，自己也撸了一个。其中包括了以前没有接触过的插件知识，哎，感觉自己对Vue的理解还是不够，只停留在了使用的这阶段。需要更多的往深层次的地方去钻。不说废话了，直接上代码。\n# 效果演示\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190814144315527.gif)\n全局组件需要一个index.js文件去注册\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190814145332655.png)\n### BlogMessage.vue\n这里的script是用ts写的。大家只需将这里稍做修改就可以了\n```javascript\n<template>\n  <transition name=\"slide\">\n    <div class=\"message-wrap\" :class=\"type\" v-if=\"visible\">\n      <div class=\"content\">{{content}}</div>\n    </div>\n  </transition>\n</template>\n<script lang=\'ts\'>\nimport { Component, Vue, Watch, Prop } from \"vue-property-decorator\";\n@Component({\n  components: {}\n})\nexport default class extends Vue {\n  private content: string = \"\";\n  private visible: boolean = false;\n  private type: string = \"info\"; // \'success\',\'error\'\n  private startTimer() {\n    window.setTimeout(() => {\n      this.visible = false;\n    }, 3000);\n  }\n  private mounted() {\n    this.startTimer();\n  }\n}\n</script>\n<style scoped lang=\"scss\">\n.message-wrap {\n  position: fixed;\n  background-color: #44b0f3;\n  color: #ffffff;\n  left: 40%;\n  width: 20%;\n  top: 25px;\n  height: 40px;\n  z-index: 1001;\n  border-radius: 4px;\n  text-align: center;\n  border: 1px solid #ebeef5;\n  .content {\n    line-height: 40px;\n  }\n}\n.error {\n  background-color: #fef0f0;\n  color: #f56c6c;\n}\n.success {\n  background-color: #f0f9eb;\n  color: #67c23a;\n}\n.slide-enter-active,\n.slide-leave-active {\n  transition: all 0.3s cubic-bezier(1, 0.5, 0.8, 1);\n  transition: all 0.2s ease;\n}\n.slide-enter,\n.slide-leave-to {\n  transform: translateY(-20px);\n  opacity: 0;\n}\n</style>\n```\n### index.js\n```javascript\nimport Vue from \'vue\'\nimport BlogMessage from \'./BlogMessage.vue\'\nconst MessageBox = Vue.extend(BlogMessage) // 创建的是一个组件构造器，不是实例\nconst Message = {\n  install: (options, type, duration) => {\n    if (options === undefined || options === null) {\n      options = {\n        content: \'\'\n      }\n    } else if (typeof options === \'string\' || typeof options === \'number\') {\n      options = {\n        content: options\n      }\n      if (type != undefined && options != null) {\n        options.type = type;\n      }\n    }\n    let instance = new MessageBox({\n      data: options\n    }).$mount()\n    document.body.appendChild(instance.$el) // 添加dom元素\n    Vue.nextTick(() => { // dom元素渲染完成后执行回调\n      instance.visible = true\n    })\n  }\n}\nVue.prototype.$message = Message.install;\n[\'success\', \'error\'].forEach(type => {\n  Vue.prototype.$message[type] = (content) => {\n    return Vue.prototype.$message(content, type)\n  }\n})\nexport default Message\n```\n### 使用组件\n1. 全局注册\n```javascript\nimport Vue from \'vue\';\nimport Message from \'@/components/common/message\';\nVue.use(Message);\n```\n2. 调用方法\n```javascript\n  private test1() {\n    this.$message(\"这是一条普通消息\");\n  }\n  private test2() {\n    this.$message.success(\"这是一条成功消息\");\n    // this.$message(\"这是一条成功消息\", \"success\");\n  }\n  private test3() {\n    this.$message.error(\"这是一条失败消息\");\n    // this.$message(\"这是一条失败消息\", \"error\");\n  }\n```\n', 'vue写一个全局Message组件——插件知识', '组件,message,插件', 0, 'vue');
INSERT INTO `article` VALUES (62, '2019-08-16 09:52:51', '2019-12-16 09:52:51', NULL, '最近写了一个checkbox组件。跟其他的ui组件库一样。被checkbox-group组件包裹，根据其v-model绑定的值，用于储存多选框被选中的值。\n```javascript\n<checkbox-group v-model=\"checkList\">\n   <checkbox\n      v-for=\"(item,index) in data\"\n      v-bind:key=\"index\"\n      :label=\"item.name\"\n      :value=\"item.id\"\n    ></checkbox>\n</checkbox-group>\n```\n **CheckboxGroup.vue**\n```javascript\n<template>\n  <div class=\"checkbox-group-wrap\">\n    <slot></slot>\n  </div>\n</template>\nexport default class extends Vue {\n  private checkBoxGroup: string[] = [];\n  private pushItem(value) {\n    this.checkBoxGroup.push(value);\n    this.$emit(\"input\", this.checkBoxGroup);\n  }\n  private removeItem(value) {\n    const index = this.checkBoxGroup.indexOf(value);\n    this.checkBoxGroup.splice(index, 1);\n    this.$emit(\"input\", this.checkBoxGroup);\n  }\n}\n```\n**而插槽slot是无法进行自定义事件的监听的，即Checkbox组件不能在多选框选中后触发slot的pushItem事件并传值**\n```javascript\n<slot @pushItem=\"pushItem\"></slot>  // 错误的写法\n```\n### 解决办法\n**checkboxGroup.vue**\n```javascript\nprivate mounted() {\n    this.$on(\"pushItem\", this.pushItem);  // 在mounted生命周期注册事件\n    this.$on(\"removeItem\", this.removeItem);\n  }\n```\n**Checkbox.vue**\n```javascript\nprivate handleClick() {\n    if (!this.isChecked) {\n      this.$parent.$emit(\"pushItem\", this.value); \n      // this.$parent.$emit()触发事件\n    } else {\n      this.$parent.$emit(\"removeItem\", this.value);\n    }\n    this.isChecked = !this.isChecked;\n    this.$emit(\"input\", this.isChecked);\n  }\n```', 'vue子组件作为slot如何触发父组件的事件，slot踩坑记录', '通信,slot,踩坑', 0, 'vue');
INSERT INTO `article` VALUES (63, '2019-08-16 09:53:39', '2019-12-16 09:53:39', NULL, '### 效果展示\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190816144726716.gif)\n### 父组件中使用\n```javascript\n<checkbox-group v-model=\"checkList\">\n        <checkbox\n          v-for=\"(item,index) in data\"\n          v-bind:key=\"index\"\n          :label=\"item.name\"\n          :value=\"item.id\"\n        ></checkbox>\n</checkbox-group>\n```\n### Checkbox.vue\n```javascript\n<template>\n  <div class=\"checkbox-wrap\" @click=\"handleClick\">\n    <div class=\"left\" :class=\"isChecked?\'box-click\':\'\'\" ref=\"box\">\n      <transition name=\"fade\">\n        <div class=\"hook\" v-show=\"isChecked\"></div>\n      </transition>\n    </div>\n    <div class=\"right\">{{label}}</div>\n  </div>\n</template>\n<script lang=\'ts\'>\nimport { Component, Vue, Watch, Prop } from \"vue-property-decorator\";\n@Component({\n  components: {}\n})\nexport default class extends Vue {\n  private isChecked: boolean = false;\n  @Prop()\n  private label!: string;\n  @Prop()\n  private value!: string;\n  private handleClick() {\n  	this.isChecked = !this.isChecked;\n    if (this.isChecked) {\n      this.$parent.$emit(\"pushItem\", this.value);\n    } else {\n      this.$parent.$emit(\"removeItem\", this.value);\n    }\n    this.$emit(\"input\", this.isChecked);\n  }\n}\n</script>\n<style scoped lang=\"scss\">\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.3s;\n}\n.fade-enter, .fade-leave-to /* .fade-leave-active below version 2.1.8 */ {\n  opacity: 0;\n}\n.checkbox-wrap {\n  height: 24px;\n  display: inline-block;\n  vertical-align: center;\n  margin-bottom: 5px;\n  .left {\n    height: 24px;\n    width: 24px;\n    border-radius: 7px;\n    background-color: #ffffff;\n    display: inline-block;\n    border: 1.2px solid #cccccc;\n    box-sizing: border-box;\n  }\n  .right {\n    margin-left: 5px; \n    padding-right: 10px;\n    display: inline;\n    vertical-align: top; // 内联元素默认的vertical-align为baseline。对象的内容与基线对齐。如果我们在right插入文字。则为出现left right不水平对齐的情况\n    line-height: 24px;\n    color: #66757f;  // 在mounted\n    font-size: 15px;\n  }\n  .box-click {\n    background-color: #1da1f2;\n    border: 0.5px solid #cccccc;\n  }\n  .hook {\n    margin-left: 8px;\n    margin-top: 2px;\n    width: 5px;\n    height: 12px;\n    border-right: 1.3px solid #ffffff;\n    border-bottom: 1.3px solid #ffffff;\n    transform: rotate(40deg);\n  }\n}\n.checkbox-wrap:hover {\n  cursor: pointer;\n}\n</style>\n```\n### CheckboxGroup.vue\n```javascript\n<template>\n  <div class=\"checkbox-group-wrap\">\n    <slot></slot>\n  </div>\n</template>\n<script lang=\'ts\'>\nimport { Component, Vue, Watch, Prop } from \"vue-property-decorator\";\n@Component({\n  components: {}\n})\nexport default class extends Vue {\n  private checkBoxGroup: string[] = [];\n  private pushItem(value) {\n    this.checkBoxGroup.push(value);\n    this.$emit(\"input\", this.checkBoxGroup);\n  }\n  private removeItem(value) {\n    const index = this.checkBoxGroup.indexOf(value);\n    this.checkBoxGroup.splice(index, 1);\n    this.$emit(\"input\", this.checkBoxGroup);\n  }\n  private mounted() {\n    this.$on(\"pushItem\", this.pushItem);\n    this.$on(\"removeItem\", this.removeItem);\n  }\n}\n</script>\n<style scoped lang=\"scss\">\n</style>\n```\n\n\n这里script部分是用ts写的，你可以改成js的语法。template和style部分不用改。注意这里子组件checkbox作为slot触发父组件checkboxGroup事件pushItem的用法。slot不能绑定事件', 'vue实现自定义checkbox组件', '组件,checkbox', 0, 'vue');
INSERT INTO `article` VALUES (64, '2019-08-18 09:54:28', '2019-12-16 09:54:28', NULL, '### 效果展示\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190818140743784.gif)\n### 父组件中使用\n```javascript\n<radio-group v-model=\"radioIschecked\">\n          <radio label=\"个人\" value=\"1\"></radio>\n          <radio label=\"收藏\" value=\"2\"></radio>\n</radio-group>\n```\n### Radio.vue\n```javascript\n<template>\n  <div class=\"radio-wrap\">\n    <div class=\"left\" :class=\"isChecked?\'box-click\':\'\'\" ref=\"box\" @click=\"handleClick\">\n      <transition name=\"fade\">\n        <div class=\"circle\" v-show=\"isChecked\"></div>\n      </transition>\n    </div>\n    <div class=\"right\">{{label}}</div>\n  </div>\n</template>\n<script lang=\'ts\'>\nimport { Component, Vue, Watch, Prop } from \"vue-property-decorator\";\n@Component({\n  components: {}\n})\nexport default class extends Vue {\n  private isChecked: boolean = false;\n  @Prop()\n  private label!: string;\n  @Prop()\n  private value!: string;\n  private handleClick() {\n    this.isChecked = !this.isChecked;\n    if (this.isChecked) {\n      this.$parent.$emit(\"radioChange\", this.value);\n    }\n  }\n  private checkIsActive(value) {\n    if (this.value === value) {\n      this.isChecked = true;\n    } else {\n      this.isChecked = false;\n    }\n  }\n}\n</script>\n<style scoped lang=\"scss\">\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.2s;\n}\n.fade-enter, .fade-leave-to /* .fade-leave-active below version 2.1.8 */ {\n  opacity: 0;\n}\n.radio-wrap {\n  height: 24px;\n  display: inline-block;\n  vertical-align: center;\n  margin-bottom: 5px;\n  .left {\n    height: 24px;\n    width: 24px;\n    border-radius: 50%;\n    background-color: #ffffff;\n    display: inline-block;\n    border: 1.2px solid #cccccc;\n    box-sizing: border-box;\n    .circle {\n      margin-left: 9px;\n      margin-top: 9px;\n      border-radius: 50%;\n      width: 6px;\n      height: 6px;\n      background-color: #ffffff;\n    }\n  }\n  .left:hover {\n    cursor: pointer;\n  }\n  .right {\n    margin-left: 5px;\n    padding-right: 10px;\n    display: inline;\n    vertical-align: top; // 内联元素默认的vertical-align为baseline。对象的内容与基线对齐。如果我们在right插入文字。则为出现left right不水平对齐的情况\n    line-height: 24px;\n    color: #66757f; // 在mounted\n    font-size: 15px;\n  }\n  .box-click {\n    background-color: #1da1f2;\n    border: 0.5px solid #cccccc;\n  }\n}\n</style>\n```\n### RadioGroup.vue\n```\n<template>\n  <div class=\"radio-group-wrap\">\n    <slot></slot>\n  </div>\n</template>\n<script lang=\'ts\'>\nimport { Component, Vue, Watch, Prop } from \"vue-property-decorator\";\n@Component({\n  components: {}\n})\nexport default class extends Vue {\n  @Prop()\n  private value!: string;\n  private dispatch(value) {\n    // 调用所有子组件的checkIsActive方法\n    this.$children.forEach(item => {\n      const temp: any = item; // ts还是不好用。。。\n      temp.checkIsActive(value);\n    });\n  }\n  private radioChange(value) {\n    this.$emit(\"input\", value);\n    this.dispatch(value);\n  }\n  private mounted() {\n    if (this.value) {\n      this.dispatch(this.value);\n    }\n    this.$on(\"radioChange\", this.radioChange);\n  }\n}\n</script>\n<style scoped lang=\"scss\">\n</style>\n```\n\n\n这里script部分是用ts写的，你可以改成js的语法。template和style部分不用改。', 'vue实现自定义radio组件', '组件,radio', 0, 'vue');
INSERT INTO `article` VALUES (65, '2019-09-04 09:56:16', '2019-12-16 09:56:16', NULL, '\n最近在用react开发一个公众号产品。以前没有过开发公众号的经验，在这里记录一下过程中踩过的坑。\n这个项目是前后端开发的。本篇文章只站在前端的视角，希望给大家一个参考\n### 一.授权回调\n##### 微信授权过程\n1. 进入你的程序 \n2. 跳转至微信授权接口 \n3. 用户确定授权 \n4. 重定向至你的程序\n\n\n**访问微信授权接口**\n这里注意使用window.location.href 而不是window.open去访问接口，不然可能会拦截弹出的新窗口\n**授权接口的路由需要和重定向的页面不同**\n如果调用授权的页面和配置的redirect_uri是同一个页面，会出现从redirect_uri页面后退时，又重新进入到调用授权页，导致无法退出的问题。\n解决办法：可以写一个auth.js专门用于访问授权接口\nhttp://pppercywang.com/auth   ->  授权接口  ->  http://pppercywang.com/home\n**Auth.jsx**\n```javascript\ncomponentWillMount(){\n    let uuid = \"\"\n    if(sessionStorage.getItem(\"uuid\")!=null){\n    uuid = sessionStorage.getItem(\"uuid\")\n    }else{\n      uuid = this.uuid(32,8)\n    }\n    window.location.href = `http://zb.weaaacc369.com/api/Activity/auth.html?uuid=${uuid}`\n    sessionStorage.setItem(\"uuid\",uuid)\n  }\n```\n访问授权页面时会出现请在微信客户端打开链接。我门可以使用微信开发者工具的公众号网页访问你的程序即可。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190904163957712.png)\n### 二.内网穿透\n开发公众号一定要解决的一个问题就是内网穿透，不然后端每次都重定向到你部署前端程序的那台服务器。那你每次修改代码都需要重新部署。让其重定向至你本地的程序。这里大家可以使用花生壳进行内网穿透。是免费的\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190904162335502.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjU2NTEzNw==,size_16,color_FFFFFF,t_70)\n\n但是在本地肯定是需要设置跨域代理的。react可以直接在package.json中添加\n```javascript\n\"proxy\":\"http://zb.aaa.com/\",\n```\n但是当你访问：26072r546n.qicp.vip时会出现**Invalid Host header**\n因为新版的webpack-dev-server出于安全考虑，默认检查hostname，如果hostname不是配置内的，将中断访问。\n解决办法：\n1.在webpackDevServer.config.js中将**disableHostCheck=true**\n2.在package.json配置的proxy会与其冲突，导致配置不生效。将其删除。使用http-proxy-middleware进行跨域代理\n\n```javascript\n安装 http-proxy-middleware 插件：\n$ npm install http-proxy-middleware --save\n$ # 或\n$ yarn add http-proxy-middleware\n```\n创建 src/setupProxy.js 并将以下内容放入该文件中(配置修改成自己的):\n```javascript\nconst proxy = require(\'http-proxy-middleware\');\n\nmodule.exports = function(app) {\n    app.use(proxy(\"/api\",{\n      \"secure\": false,\n      \"target\": \"http://zb.weikes2369.com/\",\n      \"changeOrigin\": true\n    }));\n};\n```\n\n\n', 'react开发公众号踩坑日志', '公众号,内网穿透,踩坑', 0, 'react');
INSERT INTO `article` VALUES (66, '2019-09-05 10:07:05', '2019-12-16 10:07:05', NULL, '**本文旨在用最清楚的结构去实现一些组件的基本功能。希望和大家一起学习，共同进步**\n### 效果展示：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019090518232857.gif)\n**测试组件：**\n```javascript\nclass Test extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n           active:1\n        }\n    }\n    onGroupChange(value) {\n        this.setState({\n            active: value\n        })\n    }\n    render() {\n        return (\n	        <div>\n		       	 <RadioGroup onChange={this.onGroupChange.bind(this)} active={this.state.active}>\n		               <Radio value={1}>使用余额支付</Radio>\n		               <Radio value={2}>使用微信支付</Radio>\n		          </RadioGroup>\n		         <Button onClick={()=>{\n	                        console.log(\"此时选中的是:\"+this.state.active)\n	                    }}>下一步</Button>\n	        </div>\n            )\n    }\n}\nexport default Test;\n```\n**RadioGroup：**\n```javascript\nimport React, { Component } from \'react\';\nclass RadioGroup extends Component {\n    handleActiveChange(value) {\n        console.log(`${value}被选中了`)\n        this.props.onChange(value)\n    }\n    render() {\n        return (\n            <div>\n                {\n                    React.Children.map(this.props.children, child => {\n                        let isActive = this.props.active === child.props.value ? true : false\n                        return React.cloneElement(child, {\n                            label: child.props.children,\n                            value: child.props.value,\n                            active: isActive,\n                            onClick: this.handleActiveChange.bind(this)\n                        })\n                    })\n                }\n            </div>\n        )\n    }\n}\nexport default RadioGroup;\n```\n**Radio.jsx：**\n```javascript\nimport React, { Component } from \'react\';\nimport \"./radio.scss\"\nclass Radio extends Component {\n    render() {\n        return (\n            <div className=\"radio-wrap\" onClick={this.props.onClick.bind(this,this.props.value)}>\n                <div className=\"left\">\n                    <div className={`circle ${this.props.active === true ? \'active\' : \'\'} `}>\n                        <div className=\"fork\"></div>\n                    </div>\n                    <div className=\"label\">{this.props.label}</div>\n                </div>\n            </div>\n        )\n    }\n}\nexport default Radio;\n```\n**Radio.scss：**\n```css\n.radio-wrap {\n    height: 40px;\n    background-color: #ffffff;\n    display: flex;\n    align-items: center;\n    padding: 0px 30px;\n\n    &:active {\n        background-color: rgb(221, 221, 221);\n    }\n\n    .left {\n        display: inline-block;\n\n        .circle {\n            display: inline-block;\n            height: 22px;\n            width: 22px;\n            box-sizing: border-box;\n            border: 1px solid #c5c9cd;\n            border-radius: 50%;\n            background-color: #ffffff;\n            position: relative;\n\n            \n        }\n        .active{\n            background-color: #1eb94a;\n            .fork {\n                height: 12px;\n                width: 5px;\n                border-right: 1.5px solid #ffffff;\n                border-bottom: 1.5px solid #ffffff;\n                position: absolute;\n                top: 40%;\n                left: 50%;\n                transform: translate(-50%, -50%) rotate(45deg);\n            }\n        }\n\n        .label {\n            vertical-align: top;\n            margin-left: 10px;\n            display: inline-block;\n            height: 22px;\n            line-height: 22px;\n            font-size: 14px;\n        }\n    }\n\n}\n```\n', 'react实现Radio组件', '组件,radio', 0, 'react');
INSERT INTO `article` VALUES (67, '2019-09-06 10:08:30', '2019-12-16 10:08:30', NULL, '**本文旨在用最清楚的结构去实现一些组件的基本功能。希望和大家一起学习，共同进步**\n### 效果展示\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190906120340580.gif)a\n**测试组件**\n```javascript\nclass Test extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            modalVisible: false\n        }\n    }\n    render() {\n        return (\n            <Modal visible={this.state.modalVisible} onCancel={() => {\n                console.log(\"modal close\")\n                this.setState(\n                    {\n                        modalVisible: false\n                    }\n                )\n            }} onConfirm={() => {\n                console.log(\"点击了确定按钮\")\n            }}>\n                <div className=\"modal-body\">\n                    <div className=\"row\">\n                        <div className=\"left\"><span className=\"label\">预约数量：</span><span className=\"value\">2</span></div>\n                        <div className=\"right\"><span className=\"label\">总金额为：</span><span className=\"value\">￥200</span></div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"left\"><span className=\"label\">余额抵扣：</span><span className=\"value\">￥0</span></div>\n                        <div className=\"right\"><span className=\"label\">应付余额：</span><span className=\"value\">￥200</span></div>\n                    </div>\n                </div>\n            </Modal>\n        )\n    }\n}\nexport default Test;\n```\n\n**Modal.jsx**\n```javascript\nimport React, { Component } from \'react\';\nimport \"./modal.scss\"\nclass Modal extends Component {\n    render() {\n        return this.props.visible?(\n            <div className=\"modal-mask\">\n                <div className=\"modal-wrap\">\n                    <div className=\"header\">\n                        <div className=\"title\">确认付款</div>\n                    </div>\n                    <div className=\"body\">\n                        {this.props.children}\n                    </div>\n                    <div className=\"footer\">\n                        <div className=\"cancel\" onClick={this.props.onCancel.bind(this)}>取消</div>\n                        <div className=\"confirm\" onClick={this.props.onConfirm.bind(this)}>确定</div>\n                    </div>\n                </div>\n            </div>\n        ):(<span></span>)\n    }\n}\nexport default Modal;\n```\n**modal.scss**\n```css\n.modal-mask{\n    position: fixed;\n    width: 100%;\n    height: 100%;\n    left: 0;\n    top: 0;\n    background-color: rgba(0, 0, 0, 0.5);\n    .modal-wrap{\n        z-index: 99;\n        height: 265px;\n        width: 86%;\n        margin-left: 6%;\n        margin-top: 120px;\n        background: url(\"../../../assets/img/modalHeader.png\") no-repeat ;\n        background-size:100% 100%;\n        animation:slideDown .3s;\n        .header{\n            height:104px;\n            .title{\n                padding-top: 20px;\n                color: #ffffff;\n                font-size: 22px;\n            }\n        }\n        .body{\n            height: 115px;\n        }\n        .footer{\n            height: 46px;\n            .cancel{\n                display: inline-block;\n                height: 46px;\n                line-height: 46px;\n                width: 50%;\n                font-size: 15px;\n                color: #c1c4c9;\n                border-radius: 0 0  0 15px;\n                &:active{\n                    background: rgb(221,221,221)\n                }\n            }\n            .confirm{\n                display: inline-block;\n                height: 46px;\n                line-height: 46px;\n                width: 50%;\n                font-size: 15px;\n                color: #1eb94a;\n                border-radius: 0 0 15px 0;\n                &:active{\n                    background: rgb(221,221,221)\n                }\n            }\n        }\n    }\n}\n@keyframes slideDown\n{\nfrom {margin-top:0px;}\nto {margin-top:120px;}\n}\n```', 'react实现modal/dialog组件', '组件,dialog,modal', 0, 'react');
INSERT INTO `article` VALUES (68, '2019-09-07 10:10:06', '2019-12-16 10:10:06', NULL, '### 业务需求\n1. 多选近三个月的日期。\n2. 不能选择当日之前的日期。\n\n因为antd的日期组件都是选择单个日期或者日期范围。不符合需求，所以自己就实现了一个。写的不好的地方大家请指教\n### 效果展示\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190907150439773.gif)\n**测试组件**\n```javascript\n<CheckCalendar\n      visible={this.state.showCalendar}\n       onClose={()=>{\n            this.setState({\n                 showCalendar:false\n            })\n       }}\n       onConfirm={(isCheck)=>{\n            console.log(isCheck)\n            this.setState({\n                 showCalendar:false\n            })\n       }}\n       />\n```\n**CheckCalendar.jsx**\n```javascript\nimport React, { Component, Fragment } from \"react\";\nimport { cloneDeep, chunk } from \"lodash\";\nimport PropTypes from \'prop-types\';\nimport \"animate.css\";\nimport \"./index.scss\"\n\nclass CheckCalendar extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            dateTable: [],\n            isCheck: [],\n        }\n        this.calendar = React.createRef();\n        this.mask = React.createRef();\n    }\n\n    componentWillMount() {\n        this.initDateTable()\n    }\n\n    initDateTable() {\n        let temp = []\n        for (let i = 0; i < 2; i++) {  // 取近三个月内的日期\n            let obj = this.getDateTable(i);\n            temp.push(obj);\n        }\n        this.setState({\n            dateTable: temp\n        });\n    }\n\n    getDateTable(plus) {\n        let curDate = new Date()  //现在时间\n        let curYear = curDate.getFullYear();\n        let curMonth = curDate.getMonth() + 1;\n        let curDay = curDate.getDate();\n        if (curMonth + plus > 12) {\n            curYear++\n            curMonth = curMonth + plus - 12\n        } else {\n            curMonth = curMonth + plus\n        }\n        let date = new Date(curYear, curMonth, 0);\n        let year = date.getFullYear(); // 当前年\n        let month = date.getMonth() + 1; // 当前月\n        // console.log(`${year}年${month}月.`);\n\n        let date2 = new Date(year, month, 0);\n        let days = date2.getDate(); // 当月有多少天\n        // console.log(`当月有${days}天.`);\n\n        date2.setDate(1);\n        let day = date2.getDay(); // 当月第一天是星期几\n        // console.log(`当月第一天是星期${day}.`);\n\n        let list = [];\n\n        for (let i = 0; i < days + day; i++) {\n            if (i < day) {  // 头部补零\n                list.push({\n                    isActive: false,\n                    number: 0\n                });\n            } else {\n                if (plus === 0) {\n                    if ((i - day + 1) < curDay) {\n                        list.push({\n                            disable: true,\n                            isActive: false,\n                            number: i - day + 1\n                        });\n                    } else {\n                        list.push({\n                            isActive: false,\n                            number: i - day + 1\n                        });\n                    }\n                } else {\n                    list.push({\n                        isActive: false,\n                        number: i - day + 1\n                    });\n                }\n            }\n        }\n        let hlist = chunk(list, 7); // 转换为二维数组\n        let len = hlist.length;\n        let to = 7 - hlist[len - 1].length;\n\n        // 循环尾部补0\n        for (let i = 0; i < to; i++) {\n            hlist[len - 1].push({\n                isActive: false,\n                number: 0\n            });\n        }\n        if (month < 10) {\n            month = \"0\" + month\n        }\n        const str = `${year}-${month}`\n        return {\n            \"list\": hlist,\n            \"desc\": str\n        }\n    }\n\n    handleItemClick(desc, number, index, index1, index2) {\n        let temp = cloneDeep(this.state.dateTable)\n        const flag = !temp[index].list[index1][index2].isActive\n        temp[index].list[index1][index2].isActive = flag\n        this.setState({\n            dateTable: temp,\n        })\n        const arr = desc.split(\"-\");\n        if (number < 10) {\n            number = \"0\" + number\n        }\n        if (flag) {\n            let temp = cloneDeep(this.state.isCheck);\n            temp.push(arr[0] + \"-\" + arr[1] + \"-\" + number)\n            this.setState({\n                isCheck: temp\n            })\n        } else {\n            let temp = cloneDeep(this.state.isCheck);\n            let filted = temp.filter((item) => {\n                return item !== arr[0] + \"-\" + arr[1] + \"-\" + number\n            })\n            this.setState({\n                isCheck: filted\n            })\n        }\n    }\n\n    onExit = () => {\n        const { onCancel } = this.props;\n\n        onCancel && onCancel();\n    }\n\n    onConfirm = () => {\n        const { onConfirm } = this.props;\n\n        onConfirm && onConfirm(this.state.isCheck);\n    }\n\n    render() {\n        return this.props.visible ? (\n            <div className=\"calendar-mask\">\n                <div className=\"calendar-wrap animated fadeInUp\">\n                    <RenderCalendarHeader\n                        onExit={this.onExit}\n                    />\n                    <RenderChineseWeek />\n                    <RenderDateTemp\n                        dateTable={this.state.dateTable}\n                        handleItemClick={this.handleItemClick}\n                        self={this}\n                    />\n                    <div className=\"fake-area\"></div>\n                </div>\n                <RenderConfirm\n                    onConfirm={this.onConfirm}\n                />\n            </div>\n        ) : (<span></span>)\n    }\n}\n\n/**\n * 渲染表格每个item\n * \n */\nconst RenderDateItem = (props) => {\n    const { number, active } = props;\n\n    return number === 0 ?\n        (\n            <div className=\"date-wrap\">\n                <span className=\"left\"></span><div className=\"item\"></div><span className=\"right\"></span>\n            </div>\n        ) : props.disable ?\n            (\n                <div className=\"date-wrap\">\n                    <span className=\"left\"></span>\n                    <div className=\"item disable\">{number}</div>\n                    <span className=\"right\"></span>\n                </div>\n            ) :\n            (\n                <div className=\"date-wrap\">\n                    <span className=\"left\"></span>\n                    <div className={`item ${active ? \'active\' : \'\'}`} onClick={props.itemClick} >\n                        <span>{number}</span>\n                    </div>\n                    <span className=\"right\"></span>\n                </div>\n            )\n}\n\n/**\n * 日历顶部\n * @param props.onExit 退出事件 \n */\nconst RenderCalendarHeader = (props) => {\n    const { onExit } = props;\n    return (\n        <div className=\"header\">\n            <span>日期多选</span>\n            <div className=\"exit\" onClick={onExit}></div>\n        </div>\n    )\n}\n\n/**\n * 渲染中文日期\n */\nconst RenderChineseWeek = () => {\n    const weeks = [\"日\", \"一\", \"二\", \"三\", \"四\", \"五\", \"六\"];\n    return (\n        <div className=\"week-wrap\">\n            {\n                weeks.map((item, index) => (\n                    <div className=\"week-item\" key={index}>{item}</div>\n                ))\n            }\n        </div>\n    )\n}\n\n/**\n * \n * @param props.dateTable 模板数组\n * @param prop.handleItemClick item点击事件\n * @param prop.self 父组件作用域\n */\nconst RenderDateTemp = (props) => {\n    const { dateTable, handleItemClick, self } = props;\n    return (\n        <Fragment>\n            {\n                dateTable.map((item, index) => {\n                    const arr = item.desc.split(\"-\");\n                    return (\n                        <div className=\"date-table\" key={index}>\n                            <span className=\"desc\">\n                                {arr[0] + \"年\" + arr[1] + \"月\"}\n                            </span>\n                            {\n                                item.list.map((item2, index2) => {\n                                    return (\n                                        <div className=\"row\" key={index2}>\n                                            {\n                                                item2.map((item3, index3) => {\n                                                    return (\n                                                        <RenderDateItem\n                                                            itemClick={handleItemClick.bind(self, item.desc, item3.number, index, index2, index3)}\n                                                            active={item3.isActive}\n                                                            disable={item3.disable ? item3.disable : false}\n                                                            number={item3.number}\n                                                            key={index3}\n                                                        />\n                                                    )\n                                                })\n                                            }\n                                        </div>\n                                    )\n                                })\n                            }\n                        </div>\n                    );\n                })\n            }\n        </Fragment>\n    )\n}\n\nconst RenderConfirm = (props) => {\n    return (\n        <div className=\"confirm-wrap\">\n            <div className=\"confirm\" onClick={props.onConfirm}>\n                确定\n            </div>\n        </div>\n    )\n}\n\n/**\n * @param onCancel 关闭事件回调\n * @param onConfirm 确认事件回调\n * @param visible 组件显示状态\n */\nCheckCalendar.propTypes = {\n    onCancel: PropTypes.func,\n    onConfirm: PropTypes.func,\n    visible: PropTypes.bool\n}\n\nexport default CheckCalendar;\n```\n**checkCalendar.scss**\n```css\n.calendar-mask {\n    position: fixed;\n    width: 100%;\n    height: 100%;\n    left: 0;\n    top: 0;\n    background-color: rgba(0, 0, 0, 0.5);\n\n    .calendar-wrap {\n        z-index: 999;\n        width: 100%;\n        height: 100%;\n        background-color: #ffffff;\n        overflow: auto;\n        animation-duration: .3s;\n\n        .header {\n            color: black;\n            font-size: 17px;\n            font-weight: bold;\n            height: 30px;\n            line-height: 30px;\n\n            .exit {\n                width: 20px;\n                height: 20px;\n                position: relative;\n                float: left;\n                left: 20px;\n                top: 5px;\n            }\n\n            .exit::before,\n            .exit::after {\n                content: \"\";\n                position: absolute;\n                height: 20px;\n                width: 1.5px;\n                left: 8.5px;\n                background: #098fef;\n            }\n\n            .exit::before {\n                transform: rotate(45deg);\n            }\n\n            .exit::after {\n                transform: rotate(-45deg);\n            }\n\n        }\n\n        .week-wrap {\n            display: flex;\n            font-size: 16px;\n            border-bottom: 1px solid rgb(221, 221, 221);\n\n            .week-item {\n                height: 30px;\n                line-height: 30px;\n                width: 14.28571429%;\n            }\n        }\n\n        .date-table {\n            margin-top: 20px;\n\n            .desc {\n                text-align: left;\n                text-indent: 12px;\n                font-size: 18px;\n            }\n\n            .row {\n                display: flex;\n                margin: 8px 0px;\n\n                .date-wrap {\n                    height: 35px;\n                    width: 14.28571429%;\n                    line-height: 30px;\n\n                    .left {\n                        width: 100%;\n                    }\n\n                    .item {\n                        display: inline-block;\n                        width: 35px;\n                        height: 35px;\n                        font-size: 15px;\n                        font-weight: bold;\n                        line-height: 35px;\n                        border-radius: 50%;\n                    }\n\n                    .disable {\n                        background-color: rgb(238, 238, 238);\n                        color: rgb(187, 187, 187);\n                    }\n\n                    .active {\n                        background-color: #108ee9;\n                        color: #ffffff;\n                    }\n\n                    .right {\n                        width: 100%;\n                    }\n                }\n            }\n        }\n\n        .fake-area {\n            height: 53px;\n            width: 100%;\n        }\n    }\n\n    .confirm-wrap {\n        position: fixed;\n        bottom: 0;\n        height: 54px;\n        width: 100%;\n        box-sizing: border-box;\n        border-top: 1px solid rgb(221, 221, 221);\n        background-color: rgb(247, 247, 247);\n        display: flex;\n        align-items: center;\n        justify-content: center;\n\n        .confirm {\n            border-radius: 5px;\n            width: 90%;\n            background-color: #108ee9;\n            font-size: 18px;\n            color: #ffffff;\n            padding: 8px 0;\n\n            &:active {\n                background-color: rgb(14, 128, 210);\n                color: rgb(85, 166, 223)\n            }\n        }\n    }\n}\n```', 'react模仿antd手写一个多选日期日历组件', '组件,antd,多选日期', 0, 'react');
INSERT INTO `article` VALUES (69, '2019-09-21 10:11:24', '2019-12-16 10:11:24', NULL, '这真是一个史前巨坑，支付必须真机测试，没办法调试。只能alert回调。遇到的问题是:**苹果手机支付然后取消，可以alert出支付取消。但支付成功后不能alert，就以为没进入回调。安卓手机一切正常**\n 找了很多方法，各种百度 google，调jssdk的方法去支付，结果还是不行\n**解决办法:** **不用去alert，它不会执行。直接跳转到指定页面就可以了，我哭了。。**\n```javascript\n onBridgeReady(config) {\n        if (!config.package) {\n            return\n        }\n        let vm = this; // 注意this的指向\n        window.WeixinJSBridge.invoke(\n            \'getBrandWCPayRequest\', { \n            \"appId\": config.appId,\n            \"timeStamp\": config.timeStamp,\n            \"nonceStr\": config.nonceStr,\n            \"package\": config.package,\n            \"signType\": config.signType,\n            \"paySign\": config.paySign\n        },\n            function (res) {\n                alert(JSON.stringify(res)); // 支付取消会执行 支付成功不会\n                if (res.err_msg == \"get_brand_wcpay_request:ok\") {\n                    alert(\"支付成功\") // 不会执行\n                    vm.props.history.push(\"/ordertable\"); \n                } else if (res.err_msg == \"get_brand_wcpay_request:cancel\") {\n                    alert(\"支付取消\") // 会执行\n                } else {\n                    alert(\"支付失败\")\n                }\n            });\n    }\n```', '公众号微信支付接口没回调踩坑 WeixinJSBridge getBrandWCPayRequest', '支付,公众号,踩坑', 0, 'react');
INSERT INTO `article` VALUES (70, '2019-09-23 10:12:24', '2019-12-16 10:12:24', NULL, '最近在写自己个人网站时，发布文章功能需要一个添加标签组件。点击加号，输入文本。而这里的input就需要宽度根据内容自适应。百度搜大多是这两种方法，结果都不是很理想。\n```javascript\n// 方法一\n   <input type=\"text\"  @input=\"changeWidth\" id=\"myInput\" class=\"my-input\" />\n\n  changeWidth(e) {\n    let input = document.getElementById(\"myInput\");\n    const l = input.value.length;\n    input.style.width = (l+1) * 15 + \"px\"; \n  }\n// 方法二\nchangeWidth(e) {\n    let input = document.getElementById(\"myInput\");\n    input.size = input.value.length > 4 ? input.value.length : 4; // 这里input需要给个size属性\n  }\n```\n**不理想的原因皆是：输入英文字符满足需求，输入中文字符则增加的宽度不固定**\n最后使用了h5的**contenteditable**属性很简单的解决了这个需要\n```javascript\n <div\n    class=\"my-input\"\n    contenteditable=\"true\"\n ></div>\n// css\n.my-input {\n      color: #66757f;\n      display: inline-block;\n      height: 22px;\n      min-width: 20px;\n      max-width: 100px;\n      }\n```\n### 效果展示\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019092319561842.gif)\n### 查看实例\nhttps://blog.csdn.net/weixin_42565137/article/details/101286700', 'input根据内容自适应宽度', 'input,自适应宽度', 0, 'javascript');
INSERT INTO `article` VALUES (71, '2019-09-24 10:13:42', '2019-12-16 10:13:42', NULL, ' 最近在写自己个人博客时，发布文章功能需要一个添加标签组件。点击加号，输入文本。就写了一个TagInputer组件,中间遇到了一些麻烦 跟大家分享一下\n \n **遇到的问题：**\n 1. input需要根据内容自适应宽度\n 2. 绑定contenteditable元素的值\n\n### 效果展示\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190924151329142.gif)\n**TagInputer.vue**\n```javascript\n<template>\n  <div class=\"tag-inputer-wrap\">\n    <div class=\"input-wrap\" v-for=\"(item,index) in tags\" v-bind:key=\"index\">\n      <div\n        class=\"my-input\"\n        contenteditable=\"true\"\n        v-text=\"item\"\n        @input=\"handleOnInput($event,index)\"\n      ></div>\n      <div class=\"cross\" @click=\"removeTag(index)\"></div>\n    </div>\n    <div class=\"plus\" @click=\"pushTag\" v-if=\"tags.length !== mmax\">\n      <div class=\"plus-icon\"></div>\n    </div>\n  </div>\n</template>\n<script>\nexport default {\n  data() {\n    return {\n      tags: [],\n      mmax: 3\n    };\n  },\n  props: [\"max\"],\n  methods: {\n    pushTag() {\n      const temp = JSON.parse(JSON.stringify(this.tags));\n      temp.push(\"\");\n      this.tags = temp;\n      this.$emit(\"change\", this.tags);\n    },\n    removeTag(index) {\n      const temp = JSON.parse(JSON.stringify(this.tags));\n      temp.splice(index, 1);\n      this.tags = temp;\n      this.$emit(\"change\", this.tags);\n    },\n    handleOnInput(e, index) {\n      this.tags[index] = e.target.innerText;\n      this.$emit(\"change\", this.tags);\n    }\n  },\n  mounted() {\n    if (this.max) {\n      this.mmax = this.max;\n    } else {\n      this.mmax = 3;\n    }\n  }\n};\n</script>\n<style scoped lang=\"scss\">\n.tag-inputer-wrap {\n  .input-wrap {\n    display: inline-block;\n    .my-input {\n      color: #66757f;\n      display: inline-block;\n      height: 22px;\n      min-width: 20px;\n      max-width: 100px;\n      outline: none;\n      overflow: hidden;\n      vertical-align: bottom;\n      border: 1px solid #cccccc;\n      margin-right: 3px;\n      text-indent: 3px;\n      font-size: 13px;\n      box-sizing: border-box;\n      border-radius: 2px;\n    }\n    .cross {  \n      // 画叉\n      width: 16px;\n      height: 16px;\n      position: relative;\n      display: inline-block;\n      vertical-align: middle;\n      &:hover {\n        cursor: pointer;\n      }\n    }\n    .cross::before,\n    .cross::after {\n      content: \"\";\n      position: absolute;\n      height: 16px;\n      width: 1.5px;\n      right: 9px;\n      background: #cccccc;\n    }\n    .cross::before {\n      transform: rotate(45deg);\n    }\n    .cross::after {\n      transform: rotate(-45deg);\n    }\n  }\n\n  .plus {\n    // 画加号\n    &:hover {\n      cursor: pointer;\n    }\n    &:active {\n      opacity: 0.7;\n    }\n    box-sizing: border-box;\n    display: inline-block;\n    width: 22px;\n    height: 22px;\n    border: 1px solid #ddd;\n    line-height: 22px;\n    text-align: center;\n    .plus-icon {\n      display: inline-block;\n      background: $twitter-blue;\n      height: 12px;\n      position: relative;\n      width: 2px;\n    }\n\n    .plus-icon:after {\n      background: $twitter-blue;\n      content: \"\";\n      height: 12px;\n      left: 0;\n      position: absolute;\n      top: 0;\n      width: 2px;\n      transform: rotateZ(90deg);\n    }\n  }\n}\n</style>\n```\n博客地址：https://github.com/pppercyWang/twitter-blog-vue', 'vue实现添加标签组件', '组件,标签', 0, 'vue');
INSERT INTO `article` VALUES (72, '2019-09-25 10:15:02', '2019-12-16 10:15:03', NULL, '**本文是对该文章的自己一些理解，附带实例。跟大家分享一下**\nhttps://segmentfault.com/a/1190000020044435\n\n**call方法实现：**\n```javascript\nFunction.prototype.mycall = function(context,...arg){   // Function是所有函数对象的构造函数。这里给Function的原型声明了一个mycall方法，则所有的函数都拥有了这个mycall方法\n    const temp = Symbol(\"unique symbol\")  // symbol代表标识唯一性的ID（就算每次参数是unique symbol，但是temp都不相等）\n    context[temp] = this   // 这里的this 代表调用mycall的函数。this的指向：被谁调用，this就指向谁。这里的context就是传递的obj2。可以理解为obj2.fn = obj1.fn\n    context[temp](...arg)  // 这里通过展开运算符传递参数。展开运算符是传递参数的一种简写。调用fn函数\n    delete context[temp]  // 这时将obj2.fn删除。一定要删除，因为obj2本身是没有这个函数的，只是在传递作用域调用时，做一个临时属性\n}\n\nlet obj1 = {\n    name: \"obj1\",\n    fn: function(a,b,c){\n        console.log(this.name+\": \"+ a + b + c)\n    }\n}\nlet obj2 = {\n    name: \"obj2\",\n}\nobj1.fn.mycall(obj2,4,5,6)\n```\n**apply方法实现：**\n```javascript\nFunction.prototype.myApply = function (context, arg) { // apply和call实际上只有参数传递上的区别，传递的第二个参数是一个数组\n    const fn = Symbol(\'临时属性\')\n    context[fn] = this\n    context[fn](...arg)\n    delete context[fn]\n}\n\nlet obj1 = {\n    name: \"obj1\",\n    fn: function(a,b,c){\n        console.log(this.name+\": \"+ a + b + c)\n    }\n}\nlet obj2 = {\n    name: \"obj2\",\n}\nobj1.fn.myApply(obj2,[1,2,3])\n```\n**bind方法实现：**\n```javascript\nFunction.prototype.myBind = function (context, ...firstarg) {\n    const that = this // 当前调用myBind的函数            \n    const bindFn = function (...secoundarg) {   // bind的本质是将call方法封装成函数return 执行这个函数则调用call方法\n        return that.mycall(context, ...firstarg, ...secoundarg) // 调用bind的时候可能传一次参，调用bind返回的函数可能会再一次传参。\n   }\n    bindFn.prototype = Object.create(that.prototype) //  复制源函数的prototype给fToBind\n    return bindFn\n}\nlet obj1 = {\n    name: \"obj1\",\n    fn: function (...arg) {\n        console.log(this.name + \": \" + arg)\n    }\n}\nlet obj2 = {\n    name: \"obj2\",\n}\nlet fnAfterBind = obj1.fn.myBind(obj2, 1, 2, 3)\nfnAfterBind(4, 5, 6)\n```\n\n', '50行代码手写call，apply，bind方法', '作用域,bind,源码实现', 0, 'javascript');
INSERT INTO `article` VALUES (73, '2019-10-31 10:16:46', '2019-12-16 10:16:46', NULL, '\n### 效果演示:\n需求：出现搜索窗口后，点击搜索窗口外关闭搜索窗口\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191031160336774.gif)\n**vueClickOutSize.js:**\n```javascript\nconst clickOutside = {\n    // 初始化指令\n    bind(el, binding, vnode) {\n      function clickHandler(e) {\n        // 这里判断点击的元素是否是本身，是本身，则返回\n        if (el.contains(e.target)) {\n          return false;\n        }\n        // 判断指令中是否绑定了函数\n        if (binding.expression) {\n          // 如果绑定了函数 则调用那个函数，此处binding.value就是handleClose方法\n          binding.value(e);\n        }\n      }\n      // 给当前元素绑定个私有变量，方便在unbind中可以解除事件监听\n      el.__vueClickOutside__ = clickHandler;\n      document.addEventListener(\"click\", clickHandler);\n    },\n    unbind(el, binding) {\n      // 解除事件监听\n      document.removeEventListener(\"click\", el.__vueClickOutside__);\n      delete el.__vueClickOutside__; // 删除属性\n    }\n  };\n  export default clickOutside\n```\n**使用：**\n```javascript\nimport clickOutside from \"@/directives/vueClickOutSize\";\nexport default {\n  data() {\n    return {\n      flag: false\n    };\n  },\n  components: {\n    SmallArticleItem\n  },\n  directives: { clickOutside },\n  props: [\"placeholder\"],\n  methods: {\n    closeSearchBar() {  \n      if (this.flag === false) {  //可能在第一次点击时也会触发。这里做个判断\n        this.flag = true;\n      } else {\n        this.$emit(\"onClose\");\n      }\n    },\n  },\n};\n```\n**实例见: https://github.com/pppercyWang/twitter-blog-vue**', 'vue实现自定义指令 点击元素区域外执行事件', '自定义指令', 0, 'vue');
INSERT INTO `article` VALUES (74, '2019-11-12 10:17:44', '2019-12-16 10:17:44', NULL, '\n# vue-emoji-comment\n\n最近在写自己的个人博客时，还差最后一个评论功能，一个没有评论功能的博客是没有灵魂的，哈哈哈。\n##### 项目源码：https://github.com/pppercyWang/vue-emoji-comment \n### 效果演示\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191112173026640.gif)\n\n使用精灵图 + 背景定位实现，大家也可以自定义这些emoji表情。看看源码，有注释。就明白怎么弄了。\n\n这里推荐一个做精灵图的在线地址：https://sprite.ydr.me/\n\n##### 个人博客查看实例：https://github.com/pppercyWang/twitter-blog-vue  ', '基于vue的emoji表情评论组件', '组件,评论,emoji', 0, 'vue');
INSERT INTO `article` VALUES (75, '2019-12-14 10:18:33', '2019-12-16 10:18:33', NULL, '### 一、为什么要用redux\nreact和vue都是单向数据流去管理状态。而两个非父子组件之间通信就相对麻烦，特别是跨多级组件之间的通讯。所以两个框架都有相应的状态管理器，如redux vuex mobx等优秀框架。而其中大致的设计思想就是发布订阅模式，通过管理容器存储需要共享的数据，中央管理，多处派发，解决了跨级通讯的痛点。看了redux源码后，体悟很深，自己动手写了一个。\n参考文章：\nhttps://www.jianshu.com/p/e984206553c2\nhttps://github.com/bricksert/blog/issues/22   \n ### 二、什么时候用redux\n 阮一峰老师的[博客Redux 入门教程（一）](http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html)里面这样说：\n**不需要使用 Redux的场景：**\n用户的使用方式非常简单\n用户之间没有协作\n不需要与服务器大量交互，也没有使用 WebSocket\n视图层（View）只从单一来源获取数据\n**需要使用redux的场景：**\n用户的使用方式复杂\n不同身份的用户有不同的使用方式（比如普通用户和管理员）\n多个用户之间可以协作\n与服务器大量交互，或者使用了WebSocket\nView要从多个来源获取数据\n### 三.具体实现\n**版本一：发布订阅模式**\n```javascript\ncounterReducer = function (state, action) {\n    switch (action.type) {\n        case \'INCREAMENT\':\n            return {\n                ...state,\n                count: state.count + 1\n            };\n        case \'DECREAMENT\':\n            return {\n                ...state,\n                count: state.count - 1\n            };\n        default:   // 没有匹配的action，则返回原来的state\n            return state\n    }\n}\nconst createStore = function (reducer, initState) {\n    let listeners = [];\n    state = initState;\n    function subscribe(listener) { \n        listeners.push(listener);\n    }\n    function dispatch(action) {\n        state = reducer(state, action);\n        listeners.forEach(listener => {  // 执行所有subscrible的回调方法\n            listener();\n        })\n    }\n    function getState() {\n        return state;\n    }\n    return {\n        subscribe,\n        dispatch,\n        getState\n    }\n}\n```\n1.对用到state的地方进行状态监听\n2.对action.type进行约束，如果reducer中有对应，则进行修改，如果没有则不修改\n```javascript\n// 使用redux_v1\nconst store = createStore(counterReducer,{\n    count: 20\n})\nstore.subscribe(() => {\n    console.log(store.getState())\n})\nstore.dispatch({\n    type: \'INCREAMENT\'\n})\nstore.dispatch({   // dispatch一个不存在的action,state并不会改变\n    type: \'SET_PRICE\',\n    price: 111\n})\n```\n-----------------------\n对于版本一来说，reducer 是一个计划函数，接收老的 state，按计划返回新的 state。而项目中肯定有多个state, 每个state都需要对应的reducer。并且在创建store时也不可能将所有的state写在一起。我们必须将reducer和state进行拆分，随时可以添加新的state和reducer。\n\n**版本二：拆分reducer和state**\n```javascript\nconst bookInit = {\n    name: \'小葵花妈妈课堂\',\n    price: 20\n}\nfunction bookReducer(state, action) {\n    if (!state) {  // 若不存在，则将state赋值\n        state = bookInit\n    }\n    switch (action.type) {\n        case \'SET_NAME\':\n            return {\n                ...state,\n                name: action.name\n            };\n        case \'SET_PRICE\':\n            return {\n                ...state,\n                price: action.price\n            };\n        default:\n            return state\n    }\n}\nconst counterInit = {\n    count: 10\n}\nfunction counterReducer(state, action) {\n    if (!state) {\n        state = counterInit\n    }\n    switch (action.type) {\n        case \'INCREAMENT\':\n            return {\n                ...state,\n                count: state.count + 1\n            };\n        case \'DECREAMENT\':\n            return {\n                ...state,\n                count: state.count - 1\n            };\n        default:\n            return state\n    }\n}\nfunction combineReducer(reducers) {  // 拆分redux核心\n    const reducerKeys = Object.keys(reducers);\n    return function combination(state, action) {\n        let nextState = {}\n        for (let i = 0; i < reducerKeys.length; i++) {\n            let key = reducerKeys[i];\n            let reducer = reducers[key];\n            let prevState = state[key];\n            nextState[key] = reducer(prevState, action);\n        }\n        return nextState;\n    }\n}\nconst createStore = function (reducer, initState = {}) {\n    let listeners = [];\n    state = initState;\n    function subscribe(listener) {\n      	  listeners.push(listener);\n	      return function unsubscribe() {  // 退订\n	      const index = listeners.indexOf(listener)\n	      listeners.splice(index, 1)\n	    }\n    }\n    function dispatch(action) {\n        state = reducer(state, action);\n        listeners.forEach(listener => {\n            listener();\n        })\n    }\n    function getState() {\n        return state;\n    } \n    dispatch({  // 在创建store是dispatch一个不匹配任何 type 的 action。其目的是获取初始值\n        type: Symbol() // 标识唯一性\n    })\n    return {\n        subscribe,\n        dispatch,\n        getState\n    }\n}\n\n```\n这样我们就实现了一个七七八八的redux，其中combineReducer是核心实现。可以仔细看看。\n```javascript\nconst reducer = combineReducer({\n    counter: counterReducer,\n    book: bookReducer\n})\nconst store = createStore(reducer)  // 不给初始值，让其获取\nunsubscribe = store.subscribe(() => {\n    console.log(store.getState())\n})\nstore.dispatch({\n    type: \'INCREAMENT\'\n})\nunsubscribe() // 退订后下面的dispatch不会执行回调\nstore.dispatch({\n    type: \'SET_PRICE\',\n    price: 200\n})\n```\n### 四.中间件思想\n**什么是中间件？**\n个人认为中间件就是程序中可织入的，可重用的，与业务逻辑无关的组件。是用来提供额外功能的。\n\n比如现在有一个需求，在每次修改 state 的时候，记录下来 修改前的 state ，为什么修改了，以及修改后的 state。实现一个日志组件，直接上代码\n```javascript\nconst reducer = combineReducer({\n    counter: counterReducer,\n    book: bookReducer\n})\nconst store = createStore(reducer) // 不给初始值\nunsubscribe = store.subscribe(() => {\n   // todo\n})\nconst next = store.dispatch;\nstore.dispatch = function (action) {\n    console.log(\'action:\',JSON.stringify(action), )\n    console.log(\'修改前:\',store.getState(), )\n    next(action);\n    console.log(\'修改后:\',store.getState(), )\n    console.log(\'---------------------------------------\')\n}\nstore.dispatch({\n    type: \'INCREAMENT\'\n})\n\nstore.dispatch({\n    type: \'SET_PRICE\',\n    price: 18\n})\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191214145129487.png)\n', '从零实现redux及中间件思想', 'redux,状态管理,源码实现', 0, 'react');
INSERT INTO `article` VALUES (76, '2019-12-16 10:19:38', '2019-12-16 10:19:38', NULL, '### 1. 何为跨域？\n记住一点：\n只要**域名**（ip），**协议**(http和https)，**端口**其中任何一个不相同，都是跨域请求。\n\n### 2. 为什么需要跨域\n因为存在浏览器同源策略，所以才会有跨域问题。那么浏览器是出于何种原因会有跨域的限制呢。其实不难想到，跨域限制主要的目的就是为了用户的上网安全。\n\n如果浏览器没有同源策略，会存在什么样的安全问题呢。下面从 DOM 同源策略和 XMLHttpRequest 同源策略来举例说明：\n\n**如果没有 DOM 同源策略，也就是说不同域的 iframe 之间可以相互访问，那么黑客可以这样进行攻击：**\n\n1. 做一个假网站，里面用 iframe 嵌套一个银行网站 http://mybank.com。\n2. 把 iframe 宽高啥的调整到页面全部，这样用户进来除了域名，别的部分和银行的网站没有任何差别。\n3. 这时如果用户输入账号密码，我们的主网站可以跨域访问到 http://mybank.com 的 dom 节点，就可以拿到用户的账户密码了。\n\n**如果 XMLHttpRequest 同源策略，那么黑客可以进行 CSRF（跨站请求伪造） 攻击：**\n\n1. 用户登录了自己的银行页面 http://mybank.com，http://mybank.com 向用户的 cookie 中添加用户标识。\n2. 用户浏览了恶意页面 http://evil.com，执行了页面中的恶意 AJAX 请求代码。\n3. http://evil.com 向 http://mybank.com 发起 AJAX HTTP 请求，请求会默认把 http://mybank.com 对应 cookie 也同时发送过去。\n4. 银行页面从发送的 cookie 中提取用户标识，验证用户无误，response 中返回请求数据。此时数据就泄露了。\n5. 而且由于 Ajax 在后台执行，用户无法感知这一过程。\n\n**因此，有了浏览器同源策略，我们才能更安全的上网。**\n\n### 3. 是不是只有浏览器存在同源策略\n是的。假如你在后端的代码中去请求另一台服务器的接口时，就不存在同源策略，因为同源策略只针对浏览器。\n\n**前端请求后端接口需要解决两个问题：**\n1. 服务器支持跨域\n2. 解决浏览器的同源策略限制\n\n**服务器请求另一台服务器接口只需要解决一个问题：**\n1. 被请求的服务器支持跨域\n### 4. 怎么解决浏览器同源策略的限制\n\n在这里我只说两个，一个是JSONP，十分经典，早期解决跨域问题的办法。第二个是vue项目中开发环境的proxytable和生产环境的nginx正向代理\n1. JSONP(利用img，script标签的src属性是不受同源策略的限制。原理是将callback函数写进url，服务端接受参数，执行回调)\n文章参考：https://www.cnblogs.com/soyxiaobi/p/9616011.html\n2. 正向代理\n\n开发环境：proxyTable(vue.config.js)\n```javascript\nproxyTable: {\n      \'/api\': { //代理的目的：只要是/api开头的路径都往47.xx.xx.91:8848进行转发\n        target: \'http://47.xx.xx.91:8848\',   //设置代理服务器地址\n        changeOrigin: true,\n      }\n    },\n```\n生产环境：nginx(nginx.conf)\n```javascript\n     server {\n              listen 3001;\n              server_name 47.xx.xx.57;\n\n       location / {\n           root   /home/dist/; \n           try_files $uri $uri/ /index.html;\n       }\n        location /api {\n            proxy_pass http://121.xx.xx.234:8848/api;\n        }\n      }\n\n```\n### 5. 正向代理流程：\n1. 我要访问的真实地址： 47.21.76.91:8848/api/book/list\n2. proxyTable配置如上\n3. 发起请求this.axios.post(\'api/book/list\')\n4. 这时我们浏览器显示的地址就是：localhost:8080/api/book/list\n5. 而实际上调用的却是真实的地址\n\n不管是开发环境的proxyTable还是nginx的正向代理。不仅解决了跨域的问题，而且还有效避免了服务器地址被暴露。', '浏览器同源策略导致的跨域问题分析', '跨域,同源策略', 0, 'javascript');
INSERT INTO `article` VALUES (77, '2019-12-20 03:30:15', '2019-12-20 03:30:15', NULL, '```javascript\nfunction test(){\n	console.log(\"Happy Everyday!\")\n}\n```\n', '第一篇生活文章', '个人情感,没毛病', 1, '生活');
INSERT INTO `article` VALUES (78, '2019-12-23 10:21:03', '2019-12-23 10:21:03', NULL, 'aaaa', 'www', 'ww', 1, '生活');
INSERT INTO `article` VALUES (79, '2020-01-12 04:05:10', '2020-01-12 04:05:10', NULL, '### 背景\n>我司有很多需要进行权限管理的产品。其中有一个产品，需要给多个客户部署前中后台。在开发第一个版本时，代码全部分离。前端三套，后端三套。加上kafka，redis，算法，数据库等服务器，每有一个新的客户就需要部署一次，需要花费很长的时间且代码难以维护。\n>\n>后决定重构代码，产品分为前，中，后三个平台。前后端分别一套代码，支持权限管理，可拓展。前端使用路由前缀判断平台，登录时会返回不同的token和用户信息。不同的token只能访问对应平台的接口，根据用户角色生成可访问的菜单，进入不同的系统\n\n### 前言\n>权限模块对于一个项目来说是比较麻烦的部分，通常一个项目的权限管理，需要做的是下面三种级别的鉴权。\n>1. 平台级别\n>2. 页面级别（菜单）\n>3. 控件级别（如按钮，表格展示字段等）\n>\n>本篇文章站在前端的角度，实现前两种级别的权限管理（控件级别可以通过条件渲染实现）。用vue从零搭建一个前中后台权限管理模板。供大家参考。\n>\n>演示地址：**http://auth.percywang.top**\n>\n>项目地址：**https://github.com/pppercyWang/vue-authentication**\n>\n>其实大部分项目都会分离前后台，因为整合在一套代码，确实对打包优化，代码分割需要做的更多。且项目架构上会复杂一些，安全性方面需要考虑的更全面。这里也提供了一个纯后台的权限管理模板。\n>\n>项目地址：**https://github.com/pppercyWang/vue-authentication2**\n\n\n### 项目结构\n>技术栈：vue vue-router vuex element\n```javascript\nassets  静态资源\nplugins\n	element-style.scss  element样式\n    element.js   按需引入\nrouter\n	index.js 静态路由及createRouter方法\nservice\n    api.js  前中后台接口管理\nstore  vuex\nutils\n	http.js axios封装\nviews\n	foreground  前台页面\n    midground   中台页面\n	background  后台页面\n    layout    前中后台布局文件\n    404.vue   404页面\n    Login.vue   前台登录\n    AgentLogin.vue   中台登录\n    AdminLogin.vue   后台登录\npermission.js   动态路由 前中后台鉴权 菜单数据生成\nmain.js  应用入口\n```\n\n\n### 一. 路由初始化——staticRoutes\n> 三个平台登录是三个不一样的页面。/开头的是前台的路由，/agent是中台，/admin是后台。这里的重定向也可以跳转到具体的页面，但这里因为权限角色不同的原因，不能写死，就直接重定向到登录页。\n\n注意：404页需要放在路由的最后面，所以放在动态路由部分\n\n**router/index.js**\n```\nconst staticRoutes = [{\n    path: \'/login\',\n    name: \'用户登录\',\n    component: () => import(\'@/views/Login.vue\'),\n  },\n  {\n    path: \'/agent/login\',\n    name: \'中台登录\',\n    component: () => import(\'@/views/AgentLogin.vue\'),\n  },\n  {\n    path: \'/admin/login\',\n    name: \'后台登录\',\n    component: () => import(\'@/views/AdminLogin.vue\'),\n  },\n  {\n    path: \'/\',\n    redirect: \'/login\',\n  },\n  {\n    path: \'/agent\',\n    redirect: \'/agent/login\',\n  },\n  {\n    path: \'/admin\',\n    redirect: \'/admin/login\',\n  },\n]\n```\n\n### 二. 动态路由——dynamicRoutes\n>本例只有中台和后台进行鉴权，一级栏目需要icon字段，用于菜单项图标。children为一级栏目的子栏目，meta中的roles数组代表可访问该route的角色。\n\n**permission.js**\n```\nconst dynamicRoutes = {\n    // 前台路由\n    \'user\': [{\n        path: \'/\',\n        component: () => import(\'@/views/layout/Layout.vue\'),\n        name: \'首页\',\n        redirect: \'/home\',\n        children: [{\n            path: \'home\',\n            component: () => import(\'@/views/foreground/Home.vue\'),\n        }]\n    }, ],\n    // 中台路由\n    \'agent\': [{\n            path: \'/agent/member\',\n            component: () => import(\'@/views/layout/AgentLayout.vue\'),\n            name: \'会员管理\',\n            redirect: \'/agent/member/index\',\n            icon: \'el-icon-star-on\',\n            children: [{\n                    path: \'index\',\n                    component: () => import(\'@/views/midground/member/Index.vue\'),\n                    name: \'会员列表\',\n                    meta: {\n                        roles: [\'super_agent\', \'second_agent\'] // 超级代理和二级都可访问\n                    },\n                },\n                {\n                    path: \'scheme\',\n                    component: () => import(\'@/views/midground/member/Scheme.vue\'),\n                    name: \'优惠方案\',\n                    meta: {\n                        roles: [\'super_agent\']  // 只有超级代理可访问\n                    },\n                },\n            ]\n        },\n    ],\n    // 后台路由\n    \'admin\': [{\n            path: \'/admin/user\',\n            component: () => import(\'@/views/layout/AdminLayout.vue\'),\n            name: \'用户管理\',\n            redirect: \'/admin/user/index\',\n            icon: \'el-icon-user-solid\',\n            children: [{\n                    path: \'index\',\n                    component: () => import(\'@/views/background/user/Index.vue\'),\n                    name: \'用户列表\',\n                    meta: {\n                        roles: [\'super_admin\', \'admin\']\n                    },\n                },\n                {\n                    path: \'detail\',\n                    component: () => import(\'@/views/background/user/UserDetail.vue\'),\n                    name: \'用户详情\',\n                    meta: {\n                        roles: [\'super_admin\']\n                    },\n                },\n            ]\n        },\n    ],\n    \'404\': {\n        path: \"*\",\n        component: () => import(\'@/views/404.vue\'),\n    }\n}\n```\n\n### 三. 登录页\n>通常在登录成功之后，后端会返回token跟用户信息，我们需要对token跟用户信息进行持久化，方便使用，这里我直接存在了sessionStorage。再根据用户角色的不同进入不同的路由\n\n**views/adminLogin.vue**\n```\ntry {\n    const res = await this.$http.post(`${this.$api.ADMIN.login}`, this.form.loginModel)\n    sessionStorage.setItem(\"adminToken\", res.Data.Token);\n    const user = res.Data.User\n    sessionStorage.setItem(\n        \"user\",\n        JSON.stringify({\n            username: user.username,\n            role: user.role,\n            ground: user.ground // 前中后台的标识  如 fore mid back\n        })\n    );\n    switch (user.role) {\n        case \"ip_admin\": // ip管理员\n            this.$router.push(\"/admin/ip/index\");\n            break;\n        case \"admin\": // 普通管理员\n            this.$router.push(\"/admin/user/index\");\n            break;\n        case \"super_admin\": // 超级管理员\n            this.$router.push(\"/admin/user/index\");\n            break;\n    }\n} catch (e) {\n    this.$message.error(e.Message)\n}\n```\n\n### 四. 路由守卫——router.beforeEach()\n>只要是进入登录页，我们需要做两个事。\n>1. 清除存储在sessionStorage的token信息和用户信息\n>2. 使用permission.js提供的createRouter()创建一个新的router实例，替换matcher。\n>\n>我们这里是使用addRoutes在静态路由的基础上添加新路由，但是文档中没有提供删除路由的api。可以试想一下，如果登录后台再登录中台，则会出现中台可以访问后台路由的情况。[为什么替换matcher可以删除addRoutes添加的路由？](https://juejin.im/post/5d14c33c5188255cfe0de779)\n>\n>注：router.beforeEach一定要放在vue实例创建之前，不然当页面刷新时的路由不会进beforeEach钩子\n\n**main.js**\n```\nrouter.beforeEach((to, from, next) => {\n  if (to.path === \'/login\' || to.path === \'/agent/login\' || to.path === \'/admin/login\') {\n    sessionStorage.clear();\n    router.matcher = createRouter().matcher // 初始化routes,移除所有dynamicRoutes\n    next()\n    return\n  }\n  authentication(to, from, next, store, router); //路由鉴权\n})\nnew Vue({\n  router,\n  store,\n  render: h => h(App)\n}).$mount(\'#app\')\n```\n\n### 五. 前中后台鉴权——authentication()\n>这里的switch函数根据to.path.split(\"/\")[1]判定平台。在登录时成功后我们sessionStorage.setItem()保存token。\n为什么要使用token agentToken adminToken三个不同的key来储存呢？而不是只将token作为key呢。这样在axios.interceptors.request.use拦截器中设置token头也不需要通过switch去获取不同的token了。\n\n因为假设我们当前的页面路由是agent/member/index，我们手动修改为admin/xxx/xxx。我们希望它跳转到admin的登录页，而不是404页面。\n>isAuthentication标识是否完成鉴权，没有鉴权则调用generateRoutes获取有效路由,再通过addRoutes添加新路由\n\n**permission.js**\n```\nexport function authentication(to, from, next, store, router) {\n    let token;\n    switch (to.path.split(\"/\")[1]) {\n        case \'agent\':\n            token = sessionStorage.getItem(\'agentToken\');\n            if (!token && to.path !== \'/agent/login\') {\n                next({\n                    path: \'/agent/login\'\n                })\n                return\n            }\n            break;\n        case \'admin\':\n            token = sessionStorage.getItem(\'adminToken\');\n            if (!token && to.path !== \'/admin/login\') {\n                next({\n                    path: \'/admin/login\'\n                })\n                return\n            }\n            break;\n        default:\n            token = sessionStorage.getItem(\'token\');\n            if (!token && to.path !== \'/login\') {\n                next({\n                    path: \'/login\'\n                })\n                return\n            }\n            break;\n    }\n    const isAuth = sessionStorage.getItem(\'isAuthentication\')\n    if (!isAuth || isAuth === \'0\') {\n        store.dispatch(\'getValidRoutes\', JSON.parse(sessionStorage.getItem(\'user\')).role).then(validRoutes => {\n            router.addRoutes(validRoutes)\n            sessionStorage.setItem(\'isAuthentication\', \'1\')\n        })\n    }\n    next();\n}\n```\n通过user.ground判定平台\n\n**store/index.js**\n```\n   getValidRoutes({commit}, role) {\n      return new Promise(resolve => {\n        let validRoutes\n        switch (JSON.parse(sessionStorage.getItem(\'user\')).ground) {\n          case \'fore\':\n            validRoutes = generateRoutes(\'user\', role, commit)\n            resolve(validRoutes);\n            break\n          case \'mid\':\n            validRoutes = generateRoutes(\'agent\', role, commit)\n            resolve(validRoutes);\n            break\n          case \'back\':\n            validRoutes = generateRoutes(\'admin\', role, commit)\n            resolve(validRoutes);\n            break\n        }\n      })\n    },\n```\n\n### 六. 角色筛选——ValidRoutes()\n>这里干了两件最重要的事\n>1. 生成el-menu的菜单数据\n>2. 生成当前角色有效的路由\n\n**permission.js**\n```\nexport function generateRoutes(target, role, commit) {\n    let targetRoutes = _.cloneDeep(dynamicRoutes[target]);\n    targetRoutes.forEach(route => {\n        if (route.children && route.children.length !== 0) {\n            route.children = route.children.filter(each => {\n                if (!each.meta || !each.meta.roles) {\n                    return true\n                }\n                return each.meta.roles.includes(role) === true\n            })\n        }\n    });\n    switch (target) {\n        case \'admin\':\n            commit(\'SET_BACKGROUD_MENU_DATA\', targetRoutes.filter(route => route.children && route.children.length !== 0)) // 菜单数据是不需要404的\n            break\n        case \'agent\':\n            commit(\'SET_MIDGROUD_MENU_DATA\', targetRoutes.filter(route => route.children && route.children.length !== 0))\n            break\n    }\n    return new Array(...targetRoutes, dynamicRoutes[\'404\'])\n}\n```\n\n### 七.页面刷新后数据丢失\n>在登录后isAuthentication为1，刷新时不会重新生成路由，导致数据丢失，在main.js监听window.onbeforeunload即可\n\n**main.js**\n```\nwindow.onbeforeunload = function () {\n  if (sessionStorage.getItem(\'user\')) {\n    sessionStorage.setItem(\'isAuthentication\', \'0\') // 在某个系统登录后，页面刷新，需重新生成路由\n  }\n}\nnew Vue({\n  router,\n  store,\n  render: h => h(App)\n}).$mount(\'#app\')\n```\n\n### 拓展\n>这时候差不多就大功告成了，只需将数据渲染到el-menu即可。\n\n1.后台控制权限\n\n>当前的路由鉴权基本上由前端控制，后端只需返回平台标识和角色。但实际开发时，肯定都是通过后台控制，菜单角色等信息需要建表入库。来修改栏目名称，一级栏目icon，菜单权限等\n>我们可以在getValidRoutes时获取一张权限表，将这些数据插入到dynamicRoutes中。后端返回的数据大致如下：\n```\n[{\n        id: 1,\n        name: \'用户管理\',\n        icon: \'el-icon-user-solid\',\n        children: [{\n                id: 3,\n                name: \'用户列表\',\n                meta: {\n                    roles: [1, 2]\n                },\n            },\n            {\n                id: 4,\n                path: \'detail\',\n                name: \'用户详情\',\n                meta: {\n                    roles: [1]\n                },\n            },\n        ]\n    },\n    {\n        id: 2,\n        name: \'IP管理\',\n        icon: \'el-icon-s-promotion\',\n        children: [{\n            id: 5,\n            name: \'IP列表\',\n            meta: {\n                roles: [1, 2, 3]\n            },\n        }, ]\n    },\n]\n```\n\n2.安全性方面\n>前端：\n>1. 跨平台进入路由，直接跳到该平台登录页。\n>2. 当前平台访问没有权限的页面报404错误。\n \n>后端：\n>1. 一定要保证相应平台的token只能调对应接口，否则报错。\n>2. 如果能做到角色接口鉴权就更好了，从接口层面拒绝请求\n\n3.axios封装\n>在请求拦截器中根据用户信息拿不同的token，设置头部信息\n在响应拦截器中，如果token过期，再根据用户信息跳转到不同的登录页\n\n\n4.api管理\n>如果后端也是一套代码。那api也可以这样进行管理，但如果没有一个统一的前缀。可以在axios设置一个统一的前缀例如proxy，这样就解决了跨域的问题。\n```\nconst USER = \'api\'\nconst AGENT = \'agent\'\nconst ADMIN = \'admin\'\nexport default {\n  USER: {\n    login: `${USER}/User/login`,\n  },\n  AGENT: {\n    login: `${AGENT}/User/login`,\n    uploadFile: `${AGENT}/Utils/uploadFile`,\n  },\n  ADMIN: {\n    login: `${ADMIN}/User/login`,\n  },\n}\n```\n```\ndevServer: {\n    proxy: {\n      \'/proxy\': {\n        target: \'http://localhost:8848\',\n        changeOrigin: true,\n        pathRewrite: {\n          \'^proxy\': \'\'  //将url中的proxy子串去掉\n        }\n      }\n    }\n  },\n```\n', 'vue从零搭建一个前中后台权限管理模板', '权限控制', 0, 'vue');

-- ----------------------------
-- Table structure for article_category
-- ----------------------------
DROP TABLE IF EXISTS `article_category`;
CREATE TABLE `article_category`  (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `created_at` timestamp(0) NULL DEFAULT NULL,
  `updated_at` timestamp(0) NULL DEFAULT NULL,
  `deleted_at` timestamp(0) NULL DEFAULT NULL,
  `category_id` int(10) UNSIGNED NOT NULL,
  `article_id` int(10) UNSIGNED NOT NULL,
  `category_name` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_article_category_deleted_at`(`deleted_at`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 91 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of article_category
-- ----------------------------
INSERT INTO `article_category` VALUES (1, '2019-09-25 02:43:28', '2019-09-25 02:43:28', NULL, 2, 9, 'javascript');
INSERT INTO `article_category` VALUES (2, '2019-09-25 02:43:28', '2019-09-25 02:43:28', NULL, 3, 9, 'react');
INSERT INTO `article_category` VALUES (3, '2019-09-25 02:45:29', '2019-09-25 02:45:29', NULL, 2, 10, 'javascript');
INSERT INTO `article_category` VALUES (4, '2019-09-25 02:45:29', '2019-09-25 02:45:29', NULL, 3, 10, 'react');
INSERT INTO `article_category` VALUES (5, '2019-09-25 02:49:06', '2019-09-25 02:49:06', NULL, 2, 11, 'javascript');
INSERT INTO `article_category` VALUES (6, '2019-09-25 02:49:06', '2019-09-25 02:49:06', NULL, 3, 11, 'react');
INSERT INTO `article_category` VALUES (7, '2019-09-25 02:59:50', '2019-09-25 02:59:50', NULL, 2, 12, 'javascript');
INSERT INTO `article_category` VALUES (8, '2019-09-25 02:59:50', '2019-09-25 02:59:50', NULL, 3, 12, 'react');
INSERT INTO `article_category` VALUES (9, '2019-09-25 03:01:49', '2019-09-25 03:01:49', NULL, 2, 13, 'javascript');
INSERT INTO `article_category` VALUES (10, '2019-09-25 03:01:49', '2019-09-25 03:01:49', NULL, 3, 13, 'react');
INSERT INTO `article_category` VALUES (11, '2019-09-25 03:02:11', '2019-09-25 03:02:11', NULL, 2, 14, 'javascript');
INSERT INTO `article_category` VALUES (12, '2019-09-25 03:02:11', '2019-09-25 03:02:11', NULL, 3, 14, 'react');
INSERT INTO `article_category` VALUES (13, '2019-09-25 03:02:25', '2019-09-25 03:02:25', NULL, 1, 15, 'nodejs');
INSERT INTO `article_category` VALUES (14, '2019-09-25 03:02:25', '2019-09-25 03:02:25', NULL, 5, 15, 'express');
INSERT INTO `article_category` VALUES (15, '2019-09-25 03:02:48', '2019-09-25 03:02:48', NULL, 4, 16, 'vue');
INSERT INTO `article_category` VALUES (16, '2019-09-25 03:02:48', '2019-09-25 03:02:48', NULL, 7, 16, 'golang');
INSERT INTO `article_category` VALUES (17, '2019-09-25 03:02:48', '2019-09-25 03:02:48', NULL, 5, 16, 'express');
INSERT INTO `article_category` VALUES (18, '2019-09-25 03:03:57', '2019-09-25 03:03:57', NULL, 4, 17, 'vue');
INSERT INTO `article_category` VALUES (19, '2019-09-25 03:03:57', '2019-09-25 03:03:57', NULL, 7, 17, 'golang');
INSERT INTO `article_category` VALUES (20, '2019-09-25 03:03:57', '2019-09-25 03:03:57', NULL, 5, 17, 'express');
INSERT INTO `article_category` VALUES (21, '2019-09-25 03:06:00', '2019-09-25 03:06:00', NULL, 4, 18, 'vue');
INSERT INTO `article_category` VALUES (22, '2019-09-25 03:06:00', '2019-09-25 03:06:00', NULL, 7, 18, 'golang');
INSERT INTO `article_category` VALUES (23, '2019-09-25 03:06:01', '2019-09-25 03:06:01', NULL, 5, 18, 'express');
INSERT INTO `article_category` VALUES (24, '2019-09-25 09:50:17', '2019-09-25 09:50:17', NULL, 4, 19, 'vue');
INSERT INTO `article_category` VALUES (25, '2019-09-29 11:42:08', '2019-09-29 11:42:08', NULL, 2, 20, 'javascript');
INSERT INTO `article_category` VALUES (26, '2019-09-29 11:42:38', '2019-09-29 11:42:38', NULL, 4, 21, 'vue');
INSERT INTO `article_category` VALUES (27, '2019-09-29 11:43:25', '2019-09-29 11:43:25', NULL, 3, 22, 'react');
INSERT INTO `article_category` VALUES (28, '2019-09-29 11:44:05', '2019-09-29 11:44:05', NULL, 3, 23, 'react');
INSERT INTO `article_category` VALUES (29, '2019-09-29 11:44:47', '2019-09-29 11:44:47', NULL, 4, 24, 'vue');
INSERT INTO `article_category` VALUES (30, '2019-09-29 11:45:17', '2019-09-29 11:45:17', NULL, 4, 25, 'vue');
INSERT INTO `article_category` VALUES (31, '2019-09-29 11:46:46', '2019-09-29 11:46:46', NULL, 9, 26, 'typescript');
INSERT INTO `article_category` VALUES (32, '2019-09-29 11:47:47', '2019-09-29 11:47:47', NULL, 4, 27, 'vue');
INSERT INTO `article_category` VALUES (33, '2019-11-13 07:33:10', '2019-11-13 07:33:10', NULL, 4, 28, 'vue');
INSERT INTO `article_category` VALUES (34, '2019-11-13 07:36:15', '2019-11-13 07:36:15', NULL, 4, 29, 'vue');
INSERT INTO `article_category` VALUES (35, '2019-12-10 10:02:33', '2019-12-10 10:02:33', NULL, 1, 30, 'nodejs');
INSERT INTO `article_category` VALUES (36, '2019-12-10 10:02:49', '2019-12-10 10:02:49', NULL, 5, 31, 'express');
INSERT INTO `article_category` VALUES (37, '2019-12-10 10:03:13', '2019-12-10 10:03:13', NULL, 1, 32, 'nodejs');
INSERT INTO `article_category` VALUES (38, '2019-12-16 07:33:11', '2019-12-16 07:33:11', NULL, 2, 33, 'javascript');
INSERT INTO `article_category` VALUES (39, '2019-12-16 07:35:27', '2019-12-16 07:35:27', NULL, 2, 34, 'javascript');
INSERT INTO `article_category` VALUES (40, '2019-12-16 07:39:51', '2019-12-16 07:39:51', NULL, 10, 35, 'mongoDB');
INSERT INTO `article_category` VALUES (41, '2019-12-16 07:41:56', '2019-12-16 07:41:56', NULL, 2, 36, 'javascript');
INSERT INTO `article_category` VALUES (42, '2019-12-16 07:44:04', '2019-12-16 07:44:04', NULL, 2, 37, 'javascript');
INSERT INTO `article_category` VALUES (43, '2019-12-16 07:48:25', '2019-12-16 07:48:25', NULL, 13, 38, 'linux');
INSERT INTO `article_category` VALUES (44, '2019-12-16 07:48:25', '2019-12-16 07:48:25', NULL, 12, 38, 'nginx');
INSERT INTO `article_category` VALUES (45, '2019-12-16 07:50:19', '2019-12-16 07:50:19', NULL, 1, 39, 'nodejs');
INSERT INTO `article_category` VALUES (46, '2019-12-16 07:50:19', '2019-12-16 07:50:19', NULL, 5, 39, 'express');
INSERT INTO `article_category` VALUES (47, '2019-12-16 07:51:58', '2019-12-16 07:51:58', NULL, 13, 40, 'linux');
INSERT INTO `article_category` VALUES (48, '2019-12-16 07:53:38', '2019-12-16 07:53:38', NULL, 4, 41, 'vue');
INSERT INTO `article_category` VALUES (49, '2019-12-16 07:57:15', '2019-12-16 07:57:15', NULL, 2, 42, 'javascript');
INSERT INTO `article_category` VALUES (50, '2019-12-16 08:00:51', '2019-12-16 08:00:51', NULL, 4, 43, 'vue');
INSERT INTO `article_category` VALUES (51, '2019-12-16 08:05:31', '2019-12-16 08:05:31', NULL, 4, 44, 'vue');
INSERT INTO `article_category` VALUES (52, '2019-12-16 08:08:40', '2019-12-16 08:08:40', NULL, 2, 45, 'javascript');
INSERT INTO `article_category` VALUES (53, '2019-12-16 08:10:15', '2019-12-16 08:10:15', NULL, 4, 46, 'vue');
INSERT INTO `article_category` VALUES (54, '2019-12-16 08:10:15', '2019-12-16 08:10:15', NULL, 12, 46, 'nginx');
INSERT INTO `article_category` VALUES (55, '2019-12-16 09:00:59', '2019-12-16 09:00:59', NULL, 7, 47, 'golang');
INSERT INTO `article_category` VALUES (56, '2019-12-16 09:02:35', '2019-12-16 09:02:35', NULL, 4, 48, 'vue');
INSERT INTO `article_category` VALUES (57, '2019-12-16 09:03:58', '2019-12-16 09:03:58', NULL, 7, 49, 'golang');
INSERT INTO `article_category` VALUES (58, '2019-12-16 09:05:29', '2019-12-16 09:05:29', NULL, 7, 50, 'golang');
INSERT INTO `article_category` VALUES (59, '2019-12-16 09:06:49', '2019-12-16 09:06:49', NULL, 4, 51, 'vue');
INSERT INTO `article_category` VALUES (60, '2019-12-16 09:08:09', '2019-12-16 09:08:09', NULL, 13, 52, 'linux');
INSERT INTO `article_category` VALUES (61, '2019-12-16 09:08:10', '2019-12-16 09:08:10', NULL, 7, 52, 'golang');
INSERT INTO `article_category` VALUES (62, '2019-12-16 09:12:39', '2019-12-16 09:12:39', NULL, 11, 53, 'mysql');
INSERT INTO `article_category` VALUES (63, '2019-12-16 09:15:24', '2019-12-16 09:15:24', NULL, 9, 54, 'typescript');
INSERT INTO `article_category` VALUES (64, '2019-12-16 09:15:24', '2019-12-16 09:15:24', NULL, 4, 54, 'vue');
INSERT INTO `article_category` VALUES (65, '2019-12-16 09:18:39', '2019-12-16 09:18:39', NULL, 4, 55, 'vue');
INSERT INTO `article_category` VALUES (66, '2019-12-16 09:22:11', '2019-12-16 09:22:11', NULL, 4, 56, 'vue');
INSERT INTO `article_category` VALUES (67, '2019-12-16 09:23:12', '2019-12-16 09:23:12', NULL, 4, 57, 'vue');
INSERT INTO `article_category` VALUES (68, '2019-12-16 09:30:48', '2019-12-16 09:30:48', NULL, 2, 58, 'javascript');
INSERT INTO `article_category` VALUES (69, '2019-12-16 09:32:24', '2019-12-16 09:32:24', NULL, 4, 59, 'vue');
INSERT INTO `article_category` VALUES (70, '2019-12-16 09:34:30', '2019-12-16 09:34:30', NULL, 2, 60, 'javascript');
INSERT INTO `article_category` VALUES (71, '2019-12-16 09:34:30', '2019-12-16 09:34:30', NULL, 4, 60, 'vue');
INSERT INTO `article_category` VALUES (72, '2019-12-16 09:51:22', '2019-12-16 09:51:22', NULL, 4, 61, 'vue');
INSERT INTO `article_category` VALUES (73, '2019-12-16 09:52:51', '2019-12-16 09:52:51', NULL, 4, 62, 'vue');
INSERT INTO `article_category` VALUES (74, '2019-12-16 09:53:39', '2019-12-16 09:53:39', NULL, 4, 63, 'vue');
INSERT INTO `article_category` VALUES (75, '2019-12-16 09:54:28', '2019-12-16 09:54:28', NULL, 4, 64, 'vue');
INSERT INTO `article_category` VALUES (76, '2019-12-16 09:56:16', '2019-12-16 09:56:16', NULL, 3, 65, 'react');
INSERT INTO `article_category` VALUES (77, '2019-12-16 10:07:05', '2019-12-16 10:07:05', NULL, 3, 66, 'react');
INSERT INTO `article_category` VALUES (78, '2019-12-16 10:08:30', '2019-12-16 10:08:30', NULL, 3, 67, 'react');
INSERT INTO `article_category` VALUES (79, '2019-12-16 10:10:06', '2019-12-16 10:10:06', NULL, 3, 68, 'react');
INSERT INTO `article_category` VALUES (80, '2019-12-16 10:11:24', '2019-12-16 10:11:24', NULL, 3, 69, 'react');
INSERT INTO `article_category` VALUES (81, '2019-12-16 10:12:24', '2019-12-16 10:12:24', NULL, 2, 70, 'javascript');
INSERT INTO `article_category` VALUES (82, '2019-12-16 10:13:42', '2019-12-16 10:13:42', NULL, 4, 71, 'vue');
INSERT INTO `article_category` VALUES (83, '2019-12-16 10:15:02', '2019-12-16 10:15:02', NULL, 2, 72, 'javascript');
INSERT INTO `article_category` VALUES (84, '2019-12-16 10:16:46', '2019-12-16 10:16:46', NULL, 4, 73, 'vue');
INSERT INTO `article_category` VALUES (85, '2019-12-16 10:17:44', '2019-12-16 10:17:44', NULL, 4, 74, 'vue');
INSERT INTO `article_category` VALUES (86, '2019-12-16 10:18:33', '2019-12-16 10:18:33', NULL, 3, 75, 'react');
INSERT INTO `article_category` VALUES (87, '2019-12-16 10:19:38', '2019-12-16 10:19:38', NULL, 2, 76, 'javascript');
INSERT INTO `article_category` VALUES (88, '2019-12-20 03:30:15', '2019-12-20 03:30:15', NULL, 14, 77, '生活');
INSERT INTO `article_category` VALUES (89, '2019-12-23 10:21:03', '2019-12-23 10:21:03', NULL, 14, 78, '生活');
INSERT INTO `article_category` VALUES (90, '2020-01-12 04:05:10', '2020-01-12 04:05:10', NULL, 4, 79, 'vue');

-- ----------------------------
-- Table structure for category
-- ----------------------------
DROP TABLE IF EXISTS `category`;
CREATE TABLE `category`  (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `created_at` timestamp(0) NULL DEFAULT NULL,
  `updated_at` timestamp(0) NULL DEFAULT NULL,
  `deleted_at` timestamp(0) NULL DEFAULT NULL,
  `name` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_category_deleted_at`(`deleted_at`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 15 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of category
-- ----------------------------
INSERT INTO `category` VALUES (1, '2019-09-24 10:39:26', '2019-09-24 10:39:26', NULL, 'nodejs');
INSERT INTO `category` VALUES (2, '2019-09-25 01:47:44', '2019-09-25 01:47:44', NULL, 'javascript');
INSERT INTO `category` VALUES (3, '2019-09-25 01:47:46', '2019-09-25 01:47:46', NULL, 'react');
INSERT INTO `category` VALUES (4, '2019-09-25 01:47:50', '2019-09-25 01:47:50', NULL, 'vue');
INSERT INTO `category` VALUES (5, '2019-09-25 01:47:58', '2019-09-25 01:47:58', NULL, 'express');
INSERT INTO `category` VALUES (6, '2019-09-25 01:48:03', '2019-09-25 01:48:03', NULL, 'egg.js');
INSERT INTO `category` VALUES (7, '2019-09-25 01:48:09', '2019-09-25 01:48:09', NULL, 'golang');
INSERT INTO `category` VALUES (8, '2019-09-25 09:40:20', '2019-09-25 09:40:20', NULL, 'java');
INSERT INTO `category` VALUES (9, '2019-09-29 11:46:09', '2019-09-29 11:46:09', NULL, 'typescript');
INSERT INTO `category` VALUES (10, '2019-12-16 15:38:03', '2019-12-16 15:38:06', NULL, 'mongoDB');
INSERT INTO `category` VALUES (11, '2019-12-16 15:38:40', '2019-12-16 15:38:42', NULL, 'mysql');
INSERT INTO `category` VALUES (12, '2019-12-16 15:47:02', '2019-12-16 15:47:04', NULL, 'nginx');
INSERT INTO `category` VALUES (13, '2019-12-16 15:47:15', '2019-12-16 15:47:18', NULL, 'linux');
INSERT INTO `category` VALUES (14, '2019-12-20 11:29:22', '2019-12-20 11:29:25', NULL, '生活');

-- ----------------------------
-- Table structure for comment
-- ----------------------------
DROP TABLE IF EXISTS `comment`;
CREATE TABLE `comment`  (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `created_at` timestamp(0) NULL DEFAULT NULL,
  `updated_at` timestamp(0) NULL DEFAULT NULL,
  `deleted_at` timestamp(0) NULL DEFAULT NULL,
  `content` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `article_id` int(10) UNSIGNED NULL DEFAULT NULL,
  `git_user_id` int(10) UNSIGNED NULL DEFAULT NULL,
  `username` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `avatar_url` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `github_url` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `article_title` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_comment_deleted_at`(`deleted_at`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 38 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of comment
-- ----------------------------
INSERT INTO `comment` VALUES (33, '2019-12-20 02:57:55', '2019-12-20 02:57:55', NULL, 'vvv:expressionless::expressionless:', 76, 41534764, 'pppercyWang', 'https://avatars3.githubusercontent.com/u/41534764?v=4', 'https://github.com/pppercyWang', '浏览器同源策略导致的跨域问题分析');
INSERT INTO `comment` VALUES (34, '2019-12-20 02:58:43', '2019-12-20 02:58:43', NULL, ':hushed::hushed:哈哈哈我来勒', 120008, 41534764, 'pppercyWang', 'https://avatars3.githubusercontent.com/u/41534764?v=4', 'https://github.com/pppercyWang', '');
INSERT INTO `comment` VALUES (35, '2020-01-09 07:48:24', '2020-01-09 07:48:24', NULL, 'wwww', 120008, 41534764, 'pppercyWang', 'https://avatars3.githubusercontent.com/u/41534764?v=4', 'https://github.com/pppercyWang', '');
INSERT INTO `comment` VALUES (36, '2020-01-13 09:26:52', '2020-01-13 09:26:52', NULL, '我是温大漂亮', 74, 49860831, 'WenHaiYana', 'https://avatars1.githubusercontent.com/u/49860831?v=4', 'https://github.com/WenHaiYana', '基于vue的emoji表情评论组件');
INSERT INTO `comment` VALUES (37, '2020-01-16 07:44:04', '2020-01-16 07:44:04', NULL, '有点牛逼:sleepy:', 120008, 28852149, 'GitRoySu', 'https://avatars3.githubusercontent.com/u/28852149?v=4', 'https://github.com/GitRoySu', '');

-- ----------------------------
-- Table structure for git_user
-- ----------------------------
DROP TABLE IF EXISTS `git_user`;
CREATE TABLE `git_user`  (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `username` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `avatar_url` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `github_url` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 49860832 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of git_user
-- ----------------------------
INSERT INTO `git_user` VALUES (27666112, 'LiWhite', 'https://avatars3.githubusercontent.com/u/27666112?v=4', 'https://github.com/LiWhite');
INSERT INTO `git_user` VALUES (28852149, 'GitRoySu', 'https://avatars3.githubusercontent.com/u/28852149?v=4', 'https://github.com/GitRoySu');
INSERT INTO `git_user` VALUES (41534764, 'pppercyWang', 'https://avatars3.githubusercontent.com/u/41534764?v=4', 'https://github.com/pppercyWang');
INSERT INTO `git_user` VALUES (41534765, '', '', '');
INSERT INTO `git_user` VALUES (41534766, '', '', '');
INSERT INTO `git_user` VALUES (49860831, 'WenHaiYana', 'https://avatars1.githubusercontent.com/u/49860831?v=4', 'https://github.com/WenHaiYana');

-- ----------------------------
-- Table structure for user
-- ----------------------------
DROP TABLE IF EXISTS `user`;
CREATE TABLE `user`  (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `created_at` timestamp(0) NULL DEFAULT NULL,
  `updated_at` timestamp(0) NULL DEFAULT NULL,
  `deleted_at` timestamp(0) NULL DEFAULT NULL,
  `username` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `password` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `email` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `mobile` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `qq` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `gender` int(11) NULL DEFAULT NULL,
  `age` int(11) NULL DEFAULT NULL,
  `remark` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `username`(`username`) USING BTREE,
  UNIQUE INDEX `mobile`(`mobile`) USING BTREE,
  INDEX `idx_user_deleted_at`(`deleted_at`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of user
-- ----------------------------
INSERT INTO `user` VALUES (1, '2019-08-08 02:47:37', '2019-08-08 02:47:37', NULL, 'percy', 'e10adc3949ba59abbe56e057f20f883e', '', '', '', '', 0, 0, '');

SET FOREIGN_KEY_CHECKS = 1;
